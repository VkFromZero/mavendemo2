package jp.co.softbank.ppf.pps.service.impl;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import jp.co.softbank.ppf.ppe.config.EnvConfig;
import jp.co.softbank.ppf.ppe.config.ServerInfoDto;
import jp.co.softbank.ppf.ppe.util.CommonJsonCovert;
import jp.co.softbank.ppf.ppe.util.GsonUtil;
import jp.co.softbank.ppf.ppe.util.PPEBusinessErrorException;
import jp.co.softbank.ppf.ppe.util.StringUtil;
import jp.co.softbank.ppf.ppe.util.commonJsonConvert.AddInfoDto;
import jp.co.softbank.ppf.ppe.util.commonJsonConvert.FileDto;
import jp.co.softbank.ppf.ppe.util.commonJsonConvert.PostWFTensionDTO;
import jp.co.softbank.ppf.pps.core.PpsConst;
import jp.co.softbank.ppf.pps.core.PpsMessages;
import jp.co.softbank.ppf.pps.dao.PpsBillboardDetailMapper;
import jp.co.softbank.ppf.pps.dao.PpsBillboardManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsCleanlinessItemManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsGovernmentAttfileMapper;
import jp.co.softbank.ppf.pps.dao.PpsGovernmentManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsShopAttFileManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsSpecManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsSpecialFurnitureManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfAttfileManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfBasicManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfCleanlinessBascMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfCleanlinessHistoryMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfCleanlinessItemMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfCleanlinessObjectionAllegationMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfEvidenceManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfFixtureRegistrationDetailMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfFixtureRegistrationManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfGovernmentManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfLayoutApplicationManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfResponsibleManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfSignApplicationManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfSignCompletionReportManageMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfSignboardInspectionBascMapper;
import jp.co.softbank.ppf.pps.dao.PpsWfSignboardInspectionHistoryMapper;
import jp.co.softbank.ppf.pps.dto.request.PpsCommonInfoRequestDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFChairIndividualDetailDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFCleanlinessDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFCollectiveSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFCollectiveSignboardDto1;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFCollectiveSignboardDto2;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFFixtureChairDetailDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFFixtureDetailDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFFixtureIndividualDetailDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFGovernmentDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFImpDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFParkingSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFParkingSignboardDto1;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFParkingSignboardDto2;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFPenthouseSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFPoleSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFPoleSignboardDto1;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFPoleSignboardDto2;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFRemovalSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFResponsibleDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSideSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSideSignboardDto1;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSideSignboardDto2;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSideSignboardDto3;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSignboardInspectionDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSpecDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFSpecialFurnitureDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFStandingSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFStandingSignboardDto1;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFStandingSignboardDto2;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFTransomSignboardDto;
import jp.co.softbank.ppf.pps.dto.wf.PpsStoreWFWallSignboardDto;
import jp.co.softbank.ppf.pps.entity.PpsBillboardDetail;
import jp.co.softbank.ppf.pps.entity.PpsBillboardManage;
import jp.co.softbank.ppf.pps.entity.PpsCleanlinessItemManage;
import jp.co.softbank.ppf.pps.entity.PpsGovernmentAttfile;
import jp.co.softbank.ppf.pps.entity.PpsGovernmentManage;
import jp.co.softbank.ppf.pps.entity.PpsShopAttFileManage;
import jp.co.softbank.ppf.pps.entity.PpsSpecManage;
import jp.co.softbank.ppf.pps.entity.PpsSpecialFurnitureManage;
import jp.co.softbank.ppf.pps.entity.PpsWfAttfileManage;
import jp.co.softbank.ppf.pps.entity.PpsWfBasicManage;
import jp.co.softbank.ppf.pps.entity.PpsWfCleanlinessBasc;
import jp.co.softbank.ppf.pps.entity.PpsWfCleanlinessHistory;
import jp.co.softbank.ppf.pps.entity.PpsWfCleanlinessHistoryKey;
import jp.co.softbank.ppf.pps.entity.PpsWfCleanlinessItem;
import jp.co.softbank.ppf.pps.entity.PpsWfEvidenceManage;
import jp.co.softbank.ppf.pps.entity.PpsWfFixtureRegistrationDetail;
import jp.co.softbank.ppf.pps.entity.PpsWfFixtureRegistrationManage;
import jp.co.softbank.ppf.pps.entity.PpsWfGovernmentManage;
import jp.co.softbank.ppf.pps.entity.PpsWfLayoutApplicationManage;
import jp.co.softbank.ppf.pps.entity.PpsWfResponsibleManage;
import jp.co.softbank.ppf.pps.entity.PpsWfSignApplicationManage;
import jp.co.softbank.ppf.pps.entity.PpsWfSignCompletionReportManage;
import jp.co.softbank.ppf.pps.entity.PpsWfSignboardInspectionBasc;
import jp.co.softbank.ppf.pps.entity.PpsWfSignboardInspectionDetailKey;
import jp.co.softbank.ppf.pps.entity.PpsWfSignboardInspectionHistory;
import jp.co.softbank.ppf.pps.entity.PpsWfSignboardInspectionHistoryKey;
import jp.co.softbank.ppf.pps.service.PpsWfStoreImpAPIService;
import jp.co.softbank.ppf.pps.util.CommonAPIUtil;

/**
 * WF取込APIーサービスの実装
 * 
 * @author dev6963425b0
 *
 */
@Service
public class PpsWfStoreImpAPIServiceImpl implements PpsWfStoreImpAPIService {

    private static final Logger log = LoggerFactory.getLogger(PpsWfStoreImpAPIServiceImpl.class);

    private final Gson gson = GsonUtil.createCommonConvertGson();

    // functionId
    static final String FUNCID = "PPS-API-200";

    // userId
    static final String USERID = "9999";

    /** システム構成 */
    @Autowired
    private EnvConfig envConfig;

    /** WF基本情報管理 */
    @Autowired
    private PpsWfBasicManageMapper ppsWfBasicManageMapper;
    /** WFサイン計画申請情報 */
    @Autowired
    private PpsWfSignApplicationManageMapper ppsWfSignApplicationManageMapper;
    /** WFレイアウト申請情報 */
    @Autowired
    private PpsWfLayoutApplicationManageMapper ppsWfLayoutApplicationManageMapper;
    /** WFサイン竣工報告情報 */
    @Autowired
    private PpsWfSignCompletionReportManageMapper ppsWfSignCompletionReportManageMapper;
    /** WF請求書エビデンス情報 */
    @Autowired
    private PpsWfEvidenceManageMapper ppsWfEvidenceManageMapper;
    /** WF什器登録情報 */
    @Autowired
    private PpsWfFixtureRegistrationManageMapper ppsWfFixtureRegistrationManageMapper;
    /** WF什器登録明細情報 */
    @Autowired
    private PpsWfFixtureRegistrationDetailMapper ppsWfFixtureRegistrationDetailMapper;
    /** WF添付ファイル管理 */
    @Autowired
    private PpsWfAttfileManageMapper ppsWfAttfileManageMapper;

    /** スペックDB管理 */
    @Autowired
    private PpsSpecManageMapper ppsSpecManageMapper;

    /** 看板管理 */
    @Autowired
    private PpsBillboardManageMapper ppsBillboardManageMapper;

    /** 看板管理明細 */
    @Autowired
    private PpsBillboardDetailMapper ppsBillboardDetailMapper;

    /** 添付ファイル管理 */
    @Autowired
    private PpsShopAttFileManageMapper ppsShopAttFileManageMapper;

    /** 添付ファイル管理諸官庁 */
    @Autowired
    private PpsGovernmentAttfileMapper ppsGovernmentAttfileMapper;

    /** 諸官庁管理 */
    @Autowired
    private PpsGovernmentManageMapper ppsGovernmentManageMapper;

    /** WF諸官庁管理 */
    @Autowired
    private PpsWfGovernmentManageMapper ppsWfGovernmentManageMapper;

    /** WF担当者変更管理 */
    @Autowired
    private PpsWfResponsibleManageMapper ppsWfResponsibleManageMapper;

    /** WFクレンリネ異議申立 */
    @Autowired
    private PpsWfCleanlinessObjectionAllegationMapper ppsWfCleanlinessObjectionAllegationMapper;

    /** WFクレンリネ履歴 */
    @Autowired
    private PpsWfCleanlinessHistoryMapper ppsWfCleanlinessHistoryMapper;

    /** WF看板点検履歴 */
    @Autowired
    private PpsWfSignboardInspectionHistoryMapper ppsWfSignboardInspectionHistoryMapper;

    /** WF看板点検基本情報テーブル */
    @Autowired
    private PpsWfSignboardInspectionBascMapper ppsWfSignboardInspectionBascMapper;

    /** 特別什器 */
    @Autowired
    private PpsSpecialFurnitureManageMapper ppsSpecialFurnitureManageMapper;

    /** WFクレンリネス基本情報 */
    @Autowired
    private PpsWfCleanlinessBascMapper ppsWfCleanlinessBascMapper;

    // クレンリネス調査項目管理テーブル
    @Autowired
    private PpsCleanlinessItemManageMapper ppsCleanlinessItemManageMapper;

    // クレンリネス調査項目テーブル
    @Autowired
    private PpsWfCleanlinessItemMapper ppsWfCleanlinessItemMapper;

    /** 項目入力チェック */
    private StringBuffer appItemErrMsg;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public Map<String, Object> saveWFStoreData(PpsCommonInfoRequestDto requestDto) throws Exception {
        Map<String, Object> resultMap = new HashMap<>();
        Long version = 1L;
        appItemErrMsg = new StringBuffer();

        // DB操作
        boolean insertDatalogicFlag = false;
        // 看板DB関連フラグ
        boolean billboardDBlogicFlag = false;

        // 許可開始日
        LocalDate licenseStartDate = null;
        // 次回更新日
        LocalDate nextUpdateDate = null;

        // 代理店申請者メールアドレス
        String agencyApplicantMail = "";

        String jsonStr = gson.toJson(requestDto);
        // 共通項目を取込
        String commonStoreDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFImpDto.class);
        PostWFTensionDTO<PpsStoreWFImpDto> commonStoreWFImpDto = gson.fromJson(commonStoreDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFImpDto>>() {
                }.getType());

        // WFaddInfo
        AddInfoDto addInfoDto = commonStoreWFImpDto.getAddInfoDto();
        String wfId = addInfoDto.getWfId();
        String execWfId = addInfoDto.getExecWfId();
        String taskId = addInfoDto.getTaskId();
        String decisionType = addInfoDto.getDecisionType();
        String taskStatus = addInfoDto.getTaskStatus();

        // 看板点検申請
        if (PpsConst.WFDIV.WF0000000212.equals(wfId)) {
            String commonBillBoardCheckDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFSignboardInspectionDto.class);
            PostWFTensionDTO<PpsStoreWFSignboardInspectionDto> commonStoreWFBillBoardCheckDto = gson.fromJson(
                    commonBillBoardCheckDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFSignboardInspectionDto>>() {
                    }.getType());
            List<PpsStoreWFSignboardInspectionDto> ppsStoreWFStoreWFBillBoardCheckDtoList = commonStoreWFBillBoardCheckDto
                    .getItemsDto();
            String billboardCheckJson = JSON.toJSONString(ppsStoreWFStoreWFBillBoardCheckDtoList);
            List<PpsWfSignboardInspectionHistory> ppsWfbillboardCheckList = gson.fromJson(billboardCheckJson,
                    new TypeToken<List<PpsWfSignboardInspectionHistory>>() {
                    }.getType());
            // wf看板点検導入
            billboardImport(ppsWfbillboardCheckList, decisionType, setSignboardinspectionWFStatus(taskStatus), execWfId,
                    wfId);
            // ・ファイル関連非同期処理スキップする
            return new HashMap<String, Object>();
        }

        // 特別什器
        if (PpsConst.WFDIV.WF0000000210.equals(wfId)) {
            String commonSpecialFurnitureDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFSpecialFurnitureDto.class);
            PostWFTensionDTO<PpsStoreWFSpecialFurnitureDto> commonStoreWFSpecialFurnitureDto = gson.fromJson(
                    commonSpecialFurnitureDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFSpecialFurnitureDto>>() {
                    }.getType());
            List<PpsStoreWFSpecialFurnitureDto> ppsStoreWFStoreWFSpecialFurnitureDtoList = commonStoreWFSpecialFurnitureDto
                    .getItemsDto();
            String specialFurnitureJson = JSON.toJSONString(ppsStoreWFStoreWFSpecialFurnitureDtoList);
            List<PpsSpecialFurnitureManage> ppsWfSpecialFurniturekList = gson.fromJson(specialFurnitureJson,
                    new TypeToken<List<PpsSpecialFurnitureManage>>() {
                    }.getType());
            // 特別什器WF取り込み
            if (ppsWfSpecialFurniturekList != null && ppsWfSpecialFurniturekList.size() > 0) {
                // 特別什器管理情報登録
                insertSpecialFurnitureInfo(ppsWfSpecialFurniturekList, execWfId);
                // スペックDB情報登録
                insertSpecDbInfo(ppsWfSpecialFurniturekList);
                // 特別什器ファイル処理
                // FileDto
                String shopCd = ppsWfSpecialFurniturekList.get(0).getShopClassificationCode();
                List<FileDto> fileDtoList = commonStoreWFImpDto.getFileDto();
                if (fileDtoList != null && fileDtoList.size() > 0) {
                    List<PpsShopAttFileManage> ppsShopAttFileManageList = new ArrayList<PpsShopAttFileManage>();

                    fileInfoProcess(fileDtoList, ppsShopAttFileManageList, null, wfId, shopCd, taskId, execWfId,
                            licenseStartDate, nextUpdateDate);

                    // 添付ファイル特別什器
                    if (ppsShopAttFileManageList != null) {
                        for (PpsShopAttFileManage ppsShopAttFileManage : ppsShopAttFileManageList) {
                            ppsShopAttFileManage.setIsDeleted(false);
                            ppsShopAttFileManage.setUpdatedUserId(USERID);
                            ppsShopAttFileManage.setUpdatedFuncId(FUNCID);
                            ppsShopAttFileManage.setUpdatedAt(LocalDateTime.now());
                            ppsShopAttFileManage.setCreatedUserId(USERID);
                            ppsShopAttFileManage.setCreatedFuncId(FUNCID);
                            ppsShopAttFileManage.setCreatedAt(LocalDateTime.now());
                            ppsShopAttFileManageMapper.insert(ppsShopAttFileManage);
                        }
                    }
                    // 非同期情報を設定
                    resultMap.put("ppsShopAttFile", ppsShopAttFileManageList);
                }
            }
            return resultMap;
        }

        // システム連携
        if (PpsConst.TASKDIV.TS0000003410.equals(taskId) || PpsConst.TASKDIV.TS0000004410.equals(taskId)
                || PpsConst.TASKDIV.TS0000005410.equals(taskId) || PpsConst.TASKDIV.TS0000006410.equals(taskId)
                || PpsConst.TASKDIV.TS0000007410.equals(taskId) || PpsConst.TASKDIV.TS0000008410.equals(taskId)
//              ||PpsConst.TASKDIV.TS0000010010.equals(taskId)
                || (PpsConst.WFDIV.WF0000000208.equals(wfId)
                        && PpsConst.DECISIONTYPE.DECISIONTYPE03.equals(decisionType))
                || PpsConst.TASKDIV.TS0000015000.equals(taskId)) {
            insertDatalogicFlag = true;
        }

        // 看板DB明細情報関連
        if (PpsConst.WFDIV.WF0000000201.equals(wfId) || PpsConst.WFDIV.WF0000000202.equals(wfId)
                || PpsConst.WFDIV.WF0000000203.equals(wfId)) {
            billboardDBlogicFlag = true;
        }

        // FileDto
        List<FileDto> fileDtoList = commonStoreWFImpDto.getFileDto();
        List<PpsShopAttFileManage> ppsShopAttFileManageList = new ArrayList<PpsShopAttFileManage>();
        // 諸官庁File
        List<PpsGovernmentAttfile> ppsGovernmentAttfileList = new ArrayList<PpsGovernmentAttfile>();

        // 基本情報DTO
        List<PpsStoreWFImpDto> ppsStoreWFImpDtoList = commonStoreWFImpDto.getItemsDto();// gson.fromJson(commonStoreDtoStr,
                                                                                        // new
                                                                                        // TypeToken<List<PpsStoreWFImpDto>>()
                                                                                        // {}.getType());
        String storeJson = JSON.toJSONString(ppsStoreWFImpDtoList);

        // WF基本情報
        List<PpsWfBasicManage> basicList = gson.fromJson(storeJson, new TypeToken<List<PpsWfBasicManage>>() {
        }.getType());
        // WFサイン計画申請情報
        List<PpsWfSignApplicationManage> signAppist = gson.fromJson(storeJson,
                new TypeToken<List<PpsWfSignApplicationManage>>() {
                }.getType());
        // WFレイアウト申請情報
        List<PpsWfLayoutApplicationManage> layoutList = gson.fromJson(storeJson,
                new TypeToken<List<PpsWfLayoutApplicationManage>>() {
                }.getType());
        // WF請求書エビデンステーブル
        List<PpsWfEvidenceManage> evidenceList = gson.fromJson(storeJson, new TypeToken<List<PpsWfEvidenceManage>>() {
        }.getType());
        // WF什器登録情報
        List<PpsWfFixtureRegistrationManage> fixtureList = gson.fromJson(storeJson,
                new TypeToken<List<PpsWfFixtureRegistrationManage>>() {
                }.getType());

        // 諸官庁申請情報
        String commonGovernmentDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFGovernmentDto.class);
        PostWFTensionDTO<PpsStoreWFGovernmentDto> commonStoreWFGovernmentDto = gson.fromJson(commonGovernmentDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFGovernmentDto>>() {
                }.getType());
        List<PpsStoreWFGovernmentDto> ppsStoreWFGovernmentDtoList = commonStoreWFGovernmentDto.getItemsDto();
        String governmentJson = JSON.toJSONString(ppsStoreWFGovernmentDtoList);
        List<PpsGovernmentManage> ppsGovernmentManageList = gson.fromJson(governmentJson,
                new TypeToken<List<PpsGovernmentManage>>() {
                }.getType());

        // クレンリネス基本情報wf取り込み
        if (PpsConst.WFDIV.WF0000000211.equals(wfId)) {

            // クレンリネス基本情報
            String commonCleanLinessDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFCleanlinessDto.class);
            PostWFTensionDTO<PpsStoreWFCleanlinessDto> commonStoreWFCleanLinessDto = gson
                    .fromJson(commonCleanLinessDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFCleanlinessDto>>() {
                    }.getType());
            List<PpsStoreWFCleanlinessDto> ppsStoreWFStoreWFCleanlinessDtoList = commonStoreWFCleanLinessDto
                    .getItemsDto();
            String cleanlinessJson = JSON.toJSONString(ppsStoreWFStoreWFCleanlinessDtoList);
            List<PpsWfCleanlinessHistory> ppsWfCleanlinessHistoryList = gson.fromJson(cleanlinessJson,
                    new TypeToken<List<PpsWfCleanlinessHistory>>() {
                    }.getType());

            if (ppsWfCleanlinessHistoryList != null && ppsWfCleanlinessHistoryList.size() > 0) {

                if (PpsConst.DECISIONTYPE.DECISIONTYPE01.equals(decisionType)) {
                    PpsWfCleanlinessHistoryKey ppsWfCleanlinessHistoryKey = new PpsWfCleanlinessHistoryKey();
                    ppsWfCleanlinessHistoryKey
                            .setImplementationId(ppsWfCleanlinessHistoryList.get(0).getImplementationId());
                    ppsWfCleanlinessHistoryKey
                            .setShopClassificationCode(ppsWfCleanlinessHistoryList.get(0).getShopClassificationCode());
                    // 排他チェック
                    int countRecord = ppsWfCleanlinessHistoryMapper
                            .selectApplyHistoryInfoByCount(ppsWfCleanlinessHistoryKey);
                    if (countRecord > 0) {
                        log.info(PpsMessages.getMessage(PpsMessages.MSG043,
                                ppsWfCleanlinessHistoryList.get(0).getShopClassificationCode()));
                        throw new PPEBusinessErrorException(PpsMessages.getMessage(PpsMessages.MSG043,
                                ppsWfCleanlinessHistoryList.get(0).getShopClassificationCode()));
                    }
                    // 共通からWF基本情報連携
                    PpsWfCleanlinessBasc bascDto = new PpsWfCleanlinessBasc();
                    PpsWfCleanlinessHistory dto = ppsWfCleanlinessHistoryList.get(0);
                    // 実施期間ID
                    bascDto.setImplementationId(dto.getImplementationId());
                    // ショップ分類コード
                    bascDto.setShopClassificationCode(dto.getShopClassificationCode());
                    // WF実行ID
                    bascDto.setExecWfId(execWfId);
                    // WFID
                    bascDto.setWfId(wfId);
                    // FB実施
                    bascDto.setFbExecute(dto.getFbExecute());
                    // 異議申立確認
                    bascDto.setBusinessCheckResult(dto.getBusinessCheckResult());
                    // 削除フラグ
                    bascDto.setIsDeleted(false);
                    // 作成日時
                    bascDto.setCreatedAt(LocalDateTime.now());
                    // 作成機能ID
                    bascDto.setCreatedFuncId(FUNCID);
                    // 作成ユーザーID
                    bascDto.setCreatedUserId(USERID);
                    // 更新日時
                    bascDto.setUpdatedAt(LocalDateTime.now());
                    // 更新機能ID
                    bascDto.setUpdatedFuncId(FUNCID);
                    // 更新ユーザーID
                    bascDto.setUpdatedUserId(USERID);
                    ppsWfCleanlinessBascMapper.insertSelective(bascDto);
                    // 調査項目管理から調査項目テーブル連携
                    HashMap<String, Object> params = new HashMap<>();
                    params.put("implementationId", dto.getImplementationId());
                    List<PpsCleanlinessItemManage> itemNoList = ppsCleanlinessItemManageMapper
                            .selectPpsCleanlinessItemNoList(params);
                    for (PpsCleanlinessItemManage ppsCleanlinessItemManage : itemNoList) {
                        PpsWfCleanlinessItem ppsWfCleanlinessItem = new PpsWfCleanlinessItem();
                        // 実施期間ID
                        ppsWfCleanlinessItem.setImplementationId(dto.getImplementationId());
                        // ショップ分類コード
                        ppsWfCleanlinessItem.setShopClassificationCode(dto.getShopClassificationCode());
                        // 項目Nos
                        ppsWfCleanlinessItem.setItemNo(ppsCleanlinessItemManage.getItemNo());
                        // 削除フラグ
                        ppsWfCleanlinessItem.setIsDeleted(false);
                        // 作成日時
                        ppsWfCleanlinessItem.setCreatedAt(LocalDateTime.now());
                        // 作成機能ID
                        ppsWfCleanlinessItem.setCreatedFuncId(FUNCID);
                        // 作成ユーザーID
                        ppsWfCleanlinessItem.setCreatedUserId(USERID);
                        // 更新日時
                        ppsWfCleanlinessItem.setUpdatedAt(LocalDateTime.now());
                        // 更新機能ID
                        ppsWfCleanlinessItem.setUpdatedFuncId(FUNCID);
                        // 更新ユーザーID
                        ppsWfCleanlinessItem.setUpdatedUserId(USERID);
                        ppsWfCleanlinessItemMapper.insertSelective(ppsWfCleanlinessItem);
                    }
                }

                // 初期化処理
                PpsWfCleanlinessHistory ppsWfCleanlinessHistory = null;
                for (PpsWfCleanlinessHistory entity : ppsWfCleanlinessHistoryList) {
                    ppsWfCleanlinessHistory = new PpsWfCleanlinessHistory();
                    ppsWfCleanlinessHistory.setImplementationId(entity.getImplementationId());
                    ppsWfCleanlinessHistory.setShopClassificationCode(entity.getShopClassificationCode());
                    ppsWfCleanlinessHistory.setUpdatedAt(LocalDateTime.now());
                    ppsWfCleanlinessHistory.setUpdatedFuncId(FUNCID);
                    ppsWfCleanlinessHistory.setUpdatedUserId(USERID);
                    ppsWfCleanlinessHistoryMapper.updateApplyHistoryInfoForIsdeleted(ppsWfCleanlinessHistory);

                    // 共通から連携データ
                    ppsWfCleanlinessHistory.setWfId(wfId);
                    ppsWfCleanlinessHistory.setExecWfId(execWfId);
                    ppsWfCleanlinessHistory.setSurveyDate(entity.getSurveyDate());
                    ppsWfCleanlinessHistory.setSurveyTime(entity.getSurveyTime());
                    ppsWfCleanlinessHistory.setSurveyName(entity.getSurveyName());
                    ppsWfCleanlinessHistory.setSurveyEndDate(entity.getSurveyEndDate());
                    ppsWfCleanlinessHistory.setAgencyStoreCode(entity.getAgencyStoreCode());
                    ppsWfCleanlinessHistory.setMainSalesPersonMail(entity.getMainSalesPersonMail());
                    ppsWfCleanlinessHistory.setAgencyStoreName(entity.getAgencyStoreName());
                    ppsWfCleanlinessHistory.setCommonStoreCd(entity.getCommonStoreCd());
                    ppsWfCleanlinessHistory.setSalespersonResult(entity.getSalespersonResult());
                    ppsWfCleanlinessHistory.setDepartmentMail(entity.getDepartmentMail());
                    ppsWfCleanlinessHistory.setSectionalMail(entity.getSectionalMail());
                    ppsWfCleanlinessHistory.setAddMail(entity.getAddMail());
                    ppsWfCleanlinessHistory.setFbExecute(entity.getFbExecute());
                    ppsWfCleanlinessHistory.setBusinessCheckResult(entity.getBusinessCheckResult());
                    ppsWfCleanlinessHistory.setStatus(setCleanlinessapplyWFStatus(taskStatus));
                    ppsWfCleanlinessHistory.setSaveDateTo(entity.getSaveDateTo());
                    ppsWfCleanlinessHistory.setAreaCode(entity.getAreaCode());
                    ppsWfCleanlinessHistory.setOperatingStoreName(entity.getOperatingStoreName());
                    ppsWfCleanlinessHistory.setCreatedFuncId(FUNCID);
                    ppsWfCleanlinessHistory.setCreatedUserId(USERID);
                    ppsWfCleanlinessHistory.setCreatedAt(LocalDateTime.now());
                    ppsWfCleanlinessHistoryMapper.insertApplyHistoryInfo(ppsWfCleanlinessHistory);

                }
            }
            return new HashMap<String, Object>();
        }

        // 担当者変更情報
        String commonResponsibleDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFResponsibleDto.class);
        PostWFTensionDTO<PpsStoreWFResponsibleDto> commonStoreWFResponsibleDto = gson.fromJson(commonResponsibleDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFResponsibleDto>>() {
                }.getType());
        List<PpsStoreWFResponsibleDto> ppsStoreWFResponsibleDtoList = commonStoreWFResponsibleDto.getItemsDto();
        String responsibleJson = JSON.toJSONString(ppsStoreWFResponsibleDtoList);
        List<PpsWfResponsibleManage> ppsResponsibleManageList = gson.fromJson(responsibleJson,
                new TypeToken<List<PpsWfResponsibleManage>>() {
                }.getType());

        // スペックDB取込
        String commonSpecDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFSpecDto.class);
        PostWFTensionDTO<PpsStoreWFSpecDto> commonStoreWFSpecDto = gson.fromJson(commonSpecDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSpecDto>>() {
                }.getType());
        List<PpsStoreWFSpecDto> ppsStoreWFSpecDtoList = commonStoreWFSpecDto.getItemsDto();// gson.fromJson(commonSpecDtoStr,
                                                                                           // new
                                                                                           // TypeToken<List<PpsStoreWFSpecDto>>()
                                                                                           // {}.getType());
        String specJson = JSON.toJSONString(ppsStoreWFSpecDtoList);
        List<PpsSpecManage> ppsSpecManageList = gson.fromJson(specJson, new TypeToken<List<PpsSpecManage>>() {
        }.getType());

        // WF什器登録明細情報
        List<PpsWfFixtureRegistrationDetail> fixtureDetailList = new ArrayList<PpsWfFixtureRegistrationDetail>();
        // 看板管理
        List<PpsBillboardManage> ppsBillboardManageList = gson.fromJson(storeJson,
                new TypeToken<List<PpsBillboardManage>>() {
                }.getType());
        // 看板管理明細
        List<PpsBillboardDetail> ppsBillboardDetailList = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> ppsBillboardDetailListForInsert = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> ppsBillboardDetailListForUpdate = new ArrayList<PpsBillboardDetail>();
        // 変更用看板写真LIST 看板
        // 10:欄間看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate01 = new ArrayList<PpsBillboardDetail>();
        // 20:ポール看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate02 = new ArrayList<PpsBillboardDetail>();
        // 30:自立看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate03 = new ArrayList<PpsBillboardDetail>();
        // 40:壁面看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate04 = new ArrayList<PpsBillboardDetail>();
        // 50:塔屋看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate05 = new ArrayList<PpsBillboardDetail>();
        // 60:袖看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate06 = new ArrayList<PpsBillboardDetail>();
        // 70:駐車場看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate07 = new ArrayList<PpsBillboardDetail>();
        // 80:集合看板
        List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate08 = new ArrayList<PpsBillboardDetail>();

        // 【撤去看板】看板IDList
        List<String> removalSignboardIdList = new ArrayList<String>();

        // ショップ分類コード
        String shopClassificationCode = "";
        if (basicList != null && basicList.size() > 0) {
            // ショップ分類コード
            shopClassificationCode = basicList.get(0).getShopClassificationCode();
            // ロジック判断
            if (insertDatalogicFlag && StringUtils.isBlank(shopClassificationCode)) {
                throw new Exception("ショップ分類コードを入力してください。");
            }

            // 実施区分
//          String implementationType = basicList.get(0).getImplementationType();
//          //撤去看板ロジック
//          if(PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE03NAME.equals(implementationType)) {
            String commonRemovalIdDtoStr = CommonJsonCovert.toObj(jsonStr, PpsStoreWFRemovalSignboardDto.class);
            PostWFTensionDTO<PpsStoreWFRemovalSignboardDto> commonRemovalIdDto = gson.fromJson(commonRemovalIdDtoStr,
                    new TypeToken<PostWFTensionDTO<PpsStoreWFRemovalSignboardDto>>() {
                    }.getType());
            List<PpsStoreWFRemovalSignboardDto> ppsRemovalIdDtoList = commonRemovalIdDto.getItemsDto();
            if (ppsRemovalIdDtoList != null && ppsRemovalIdDtoList.size() > 0) {
                for (PpsStoreWFRemovalSignboardDto ppsStoreWFRemovalSignboardDto : ppsRemovalIdDtoList) {
                    if (StringUtils.isNotBlank(ppsStoreWFRemovalSignboardDto.getRemovalSignboardId())) {
                        removalSignboardIdList.add(ppsStoreWFRemovalSignboardDto.getRemovalSignboardId().split(",")[0]);
                    }
                }
            }
//          }

            // 基本情報
            for (PpsWfBasicManage ppsWfBasicManage : basicList) {
                licenseStartDate = ppsWfBasicManage.getGovernmentLicenseStartDate();
                nextUpdateDate = ppsWfBasicManage.getGovernmentLicenseUpdateDate();
                agencyApplicantMail = ppsWfBasicManage.getAgencyApplicantMail();
                version = 1L;
                // 既存情報取得
                PpsWfBasicManage maxVerPpsWfBasicManage = ppsWfBasicManageMapper
                        .selectMaxVerBasicInfoByShopClassificationCode(shopClassificationCode);
                if (maxVerPpsWfBasicManage != null) {
                    // 削除フラグを変更
                    if (insertDatalogicFlag) {
                        Map<String, Object> params = new HashMap<>();
                        params.put("shopClassificationCode", shopClassificationCode);
                        params.put("updatedFuncId", FUNCID);
                        params.put("updatedUserId", USERID);
                        ppsWfBasicManageMapper.updateOldVersionToDeletedByShopClassificationCode(params);
                    }

                    // maxVer
                    version = maxVerPpsWfBasicManage.getVersion();
                    version++;
                }
                ppsWfBasicManage.setVersion(version);
                ppsWfBasicManage.setCreatedFuncId(FUNCID);
                ppsWfBasicManage.setCreatedUserId(USERID);
                ppsWfBasicManage.setCreatedAt(LocalDateTime.now());
                ppsWfBasicManage.setUpdatedFuncId(FUNCID);
                ppsWfBasicManage.setUpdatedUserId(USERID);
                ppsWfBasicManage.setUpdatedAt(LocalDateTime.now());
                ppsWfBasicManage.setIsDeleted(Boolean.FALSE);
                // wf
                // ワークフローID
                ppsWfBasicManage.setWfId(wfId);
                // ワークフロー実行ID
                ppsWfBasicManage.setExecWfId(execWfId);
                // WF登録日時
                if (StringUtil.chkLocalDateTime(addInfoDto.getWfStartTstamp())) {
                    ppsWfBasicManage.setWfStartTstamp(LocalDateTime.parse(addInfoDto.getWfStartTstamp()));
                }
                // WF登録者ID
                ppsWfBasicManage.setWfStartUserId(addInfoDto.getWfStartUserId());
                // WF登録者名
                ppsWfBasicManage.setWfStartUserName(addInfoDto.getWfStartUserName());
                // WF更新者ID
                String wfLastUpdateUserId = addInfoDto.getWfLastUpdateUserId();
                if (StringUtils.isEmpty(wfLastUpdateUserId) || wfLastUpdateUserId.length() > 30) {
                    ppsWfBasicManage.setWfLastUpdateUserId(PpsConst.BATCH_USER);
                } else {
                    ppsWfBasicManage.setWfLastUpdateUserId(wfLastUpdateUserId);
                }

                // WFサイン計画申請情報
                if (signAppist != null) {
                    for (PpsWfSignApplicationManage ppsWfSignApplicationManage : signAppist) {
                        if (StringUtils.equals(shopClassificationCode,
                                ppsWfSignApplicationManage.getShopClassificationCode())) {
                            ppsWfSignApplicationManage.setVersion(version);
                            ppsWfSignApplicationManage.setCreatedUserId(USERID);
                            ppsWfSignApplicationManage.setCreatedFuncId(FUNCID);
                            ppsWfSignApplicationManage.setUpdatedUserId(USERID);
                            ppsWfSignApplicationManage.setUpdatedFuncId(FUNCID);
                            ppsWfSignApplicationManage.setIsDeleted(false);
                            ppsWfSignApplicationManage.setCreatedAt(LocalDateTime.now());
                            ppsWfSignApplicationManage.setUpdatedAt(LocalDateTime.now());
                            break;
                        }
                    }
                }

                // WFレイアウト申請情報
                if (layoutList != null) {
                    for (PpsWfLayoutApplicationManage ppsWfLayoutApplicationManage : layoutList) {
                        if (StringUtils.equals(shopClassificationCode,
                                ppsWfLayoutApplicationManage.getShopClassificationCode())) {
                            ppsWfLayoutApplicationManage.setVersion(version);
                            ppsWfLayoutApplicationManage.setCreatedUserId(USERID);
                            ppsWfLayoutApplicationManage.setCreatedFuncId(FUNCID);
                            ppsWfLayoutApplicationManage.setUpdatedUserId(USERID);
                            ppsWfLayoutApplicationManage.setUpdatedFuncId(FUNCID);
                            ppsWfLayoutApplicationManage.setIsDeleted(false);
                            ppsWfLayoutApplicationManage.setCreatedAt(LocalDateTime.now());
                            ppsWfLayoutApplicationManage.setUpdatedAt(LocalDateTime.now());
                            break;
                        }
                    }
                }

                // WF請求書エビデンステーブル
                if (evidenceList != null) {
                    for (PpsWfEvidenceManage ppsWfEvidenceManage : evidenceList) {
                        if (StringUtils.equals(shopClassificationCode,
                                ppsWfEvidenceManage.getShopClassificationCode())) {
                            ppsWfEvidenceManage.setVersion(version);
                            ppsWfEvidenceManage.setCreatedUserId(USERID);
                            ppsWfEvidenceManage.setCreatedFuncId(FUNCID);
                            ppsWfEvidenceManage.setUpdatedUserId(USERID);
                            ppsWfEvidenceManage.setUpdatedFuncId(FUNCID);
                            ppsWfEvidenceManage.setIsDeleted(false);
                            ppsWfEvidenceManage.setCreatedAt(LocalDateTime.now());
                            ppsWfEvidenceManage.setUpdatedAt(LocalDateTime.now());
                            break;
                        }
                    }
                }

                // WF什器登録情報
                if (fixtureList != null) {
                    for (PpsWfFixtureRegistrationManage ppsWfFixtureRegistrationManage : fixtureList) {
                        if (StringUtils.equals(shopClassificationCode,
                                ppsWfFixtureRegistrationManage.getShopClassificationCode())) {
                            ppsWfFixtureRegistrationManage.setVersion(version);
                            ppsWfFixtureRegistrationManage.setCreatedUserId(USERID);
                            ppsWfFixtureRegistrationManage.setCreatedFuncId(FUNCID);
                            ppsWfFixtureRegistrationManage.setUpdatedUserId(USERID);
                            ppsWfFixtureRegistrationManage.setUpdatedFuncId(FUNCID);
                            ppsWfFixtureRegistrationManage.setIsDeleted(false);
                            ppsWfFixtureRegistrationManage.setCreatedAt(LocalDateTime.now());
                            ppsWfFixtureRegistrationManage.setUpdatedAt(LocalDateTime.now());
                            break;
                        }
                    }
                }

            }
            // 什器明細
            setFixtureRegistrationDetailInfo(jsonStr, fixtureDetailList);

            // 看板管理
            if (PpsConst.WFDIV.WF0000000201.equals(wfId) || PpsConst.WFDIV.WF0000000202.equals(wfId)) {
                setBillboardInfo(jsonStr, ppsBillboardManageList, signAppist, ppsBillboardDetailList);
            } else if (PpsConst.WFDIV.WF0000000205.equals(wfId) || PpsConst.WFDIV.WF0000000206.equals(wfId)) {
                setBillboardInfoForRemodelling(jsonStr, ppsBillboardManageList, signAppist,
                        ppsBillboardDetailListForInsert, ppsBillboardDetailListForUpdate, shopClassificationCode,
                        removalSignboardIdList, ppsBillboardDetailListForWFUpdate01,
                        ppsBillboardDetailListForWFUpdate02, ppsBillboardDetailListForWFUpdate03,
                        ppsBillboardDetailListForWFUpdate04, ppsBillboardDetailListForWFUpdate05,
                        ppsBillboardDetailListForWFUpdate06, ppsBillboardDetailListForWFUpdate07,
                        ppsBillboardDetailListForWFUpdate08);
            }

            // 添付ファイル
            if (fileDtoList != null) {
                fileInfoProcess(fileDtoList, ppsShopAttFileManageList, ppsGovernmentAttfileList, wfId,
                        shopClassificationCode, taskId, execWfId, licenseStartDate, nextUpdateDate);
            }

            // 諸官庁申請ステータス
            boolean governmentFlag = true;
            if (ppsGovernmentManageList != null && PpsConst.WFDIV.WF0000000208.equals(wfId)) {
                for (PpsGovernmentManage government : ppsGovernmentManageList) {
                    PpsGovernmentManage ppsGovernmentManage = new PpsGovernmentManage();
                    ppsGovernmentManage.setShopClassificationCode(government.getShopClassificationCode());
                    ppsGovernmentManage.setUpdatedUserId(USERID);
                    ppsGovernmentManage.setUpdatedFuncId(FUNCID);
                    ppsGovernmentManage.setIsDeleted(false);
                    ppsGovernmentManage.setUpdatedAt(LocalDateTime.now());
                    if (PpsConst.DECISIONTYPE.DECISIONTYPE01.equals(decisionType)) {
                        if (ppsGovernmentManageMapper
                                .ppsSelectManageByShopClassificationCode(government.getShopClassificationCode()) > 0) {
                            if (ppsGovernmentManageMapper.ppsSelectManageByShopClassificationCodeAndStatus(
                                    government.getShopClassificationCode()) > 0) {
                                throw new PPEBusinessErrorException(PpsMessages.getMessage(PpsMessages.MSG034,
                                        government.getShopClassificationCode()));
                            } else {
                                ppsGovernmentManage
                                        .setGovernmentStatus(PpsConst.GOVERNMENTSTATUS.GOVERNMENTSTATUS02NAME);
                            }
                        } else {
                            ppsGovernmentManage.setGovernmentStatus(PpsConst.GOVERNMENTSTATUS.GOVERNMENTSTATUS02NAME);
                            ppsGovernmentManage.setCreatedUserId(USERID);
                            ppsGovernmentManage.setCreatedFuncId(FUNCID);
                            ppsGovernmentManage.setCreatedAt(LocalDateTime.now());
                            ppsGovernmentManageMapper.insertSelective(ppsGovernmentManage);
                            governmentFlag = false;
                        }
                    } else if (PpsConst.DECISIONTYPE.DECISIONTYPE02.equals(decisionType)) {
                        ppsGovernmentManage.setGovernmentStatus(PpsConst.GOVERNMENTSTATUS.GOVERNMENTSTATUS01NAME);
                    } else if (PpsConst.DECISIONTYPE.DECISIONTYPE03.equals(decisionType)) {
                        ppsGovernmentManage.setGovernmentStatus(PpsConst.GOVERNMENTSTATUS.GOVERNMENTSTATUS03NAME);
                    }
                    if (governmentFlag) {
                        ppsGovernmentManageMapper.updateByPrimaryKeySelective(ppsGovernmentManage);
                    }
                }
            }

            // ---------data insert star---------------//

            if (insertDatalogicFlag) {
                // 基本情報
                if (basicList != null) {
                    for (PpsWfBasicManage ppsWfBasicManage : basicList) {
                        ppsWfBasicManageMapper.insert(ppsWfBasicManage);
                    }
                }
                // WFサイン計画申請情報
                if (signAppist != null) {
                    for (PpsWfSignApplicationManage ppsWfSignApplicationManage : signAppist) {
                        ppsWfSignApplicationManageMapper.insert(ppsWfSignApplicationManage);
                    }
                }

                // WFレイアウト申請情報
                if (layoutList != null) {
                    for (PpsWfLayoutApplicationManage ppsWfLayoutApplicationManage : layoutList) {
                        ppsWfLayoutApplicationManageMapper.insert(ppsWfLayoutApplicationManage);
                    }
                }

                // WF請求書エビデンス情報
                if (evidenceList != null) {
                    for (PpsWfEvidenceManage ppsWfEvidenceManage : evidenceList) {
                        ppsWfEvidenceManageMapper.insert(ppsWfEvidenceManage);
                    }
                }

                // WF什器登録情報
                if (fixtureList != null) {
                    for (PpsWfFixtureRegistrationManage ppsWfFixtureRegistrationManage : fixtureList) {
                        ppsWfFixtureRegistrationManageMapper.insert(ppsWfFixtureRegistrationManage);
                    }
                }

                // WF什器登録明細情報
                if (fixtureDetailList != null) {
                    Long i = 1L;
                    for (PpsWfFixtureRegistrationDetail ppsWfFixtureRegistrationDetail : fixtureDetailList) {
                        ppsWfFixtureRegistrationDetail.setMerchandiseId(i);
                        ppsWfFixtureRegistrationDetail.setVersion(version);
                        ppsWfFixtureRegistrationDetail.setCreatedUserId(USERID);
                        ppsWfFixtureRegistrationDetail.setCreatedFuncId(FUNCID);
                        ppsWfFixtureRegistrationDetail.setUpdatedUserId(USERID);
                        ppsWfFixtureRegistrationDetail.setUpdatedFuncId(FUNCID);
                        ppsWfFixtureRegistrationDetail.setIsDeleted(false);
                        ppsWfFixtureRegistrationDetail.setCreatedAt(LocalDateTime.now());
                        ppsWfFixtureRegistrationDetail.setUpdatedAt(LocalDateTime.now());
                        ppsWfFixtureRegistrationDetailMapper.insert(ppsWfFixtureRegistrationDetail);
                        i++;
                    }
                }

                // スペックDB取込
                if (ppsSpecManageList != null) {
                    for (PpsSpecManage ppsSpecManage : ppsSpecManageList) {
                        // 総間口を間口（mm）に設置
                        ppsSpecManage.setFrontage(ppsSpecManage.getTotalFrontage());
                        ppsSpecManage.setUpdatedUserId(USERID);
                        ppsSpecManage.setUpdatedFuncId(FUNCID);
                        ppsSpecManage.setIsDeleted(false);
                        ppsSpecManage.setUpdatedAt(LocalDateTime.now());
                        if (ppsSpecManageMapper.ppsSelectManageCountByShopClassificationCode(ppsSpecManage) > 0) {
                            ppsSpecManageMapper.updateByPrimaryKeySelective(ppsSpecManage);
                        } else {
                            ppsSpecManage.setCreatedUserId(USERID);
                            ppsSpecManage.setCreatedFuncId(FUNCID);
                            ppsSpecManage.setCreatedAt(LocalDateTime.now());
                            ppsSpecManageMapper.insert(ppsSpecManage);
                        }
                    }
                }

                // 諸官庁申請情報WF取込
                if (ppsGovernmentManageList != null) {
                    for (PpsGovernmentManage ppsGovernmentManage : ppsGovernmentManageList) {
                        ppsGovernmentManage.setUpdatedUserId(USERID);
                        ppsGovernmentManage.setUpdatedFuncId(FUNCID);
                        ppsGovernmentManage.setIsDeleted(false);
                        ppsGovernmentManage.setUpdatedAt(LocalDateTime.now());
                        ppsGovernmentManage.setCreatedUserId(USERID);
                        ppsGovernmentManage.setCreatedFuncId(FUNCID);
                        ppsGovernmentManage.setCreatedAt(LocalDateTime.now());
                        // ppsGovernmentManage.setExecWfId(execWfId);
                        // 出店、移店の場合、代理店申請者メールアドレスによって、運営店メールアドレスを設定
                        if (PpsConst.WFDIV.WF0000000201.equals(wfId) || PpsConst.WFDIV.WF0000000202.equals(wfId)) {
                            ppsGovernmentManage.setOperatingResponsibleMail(agencyApplicantMail);
                        }
                        // 履歴
                        PpsWfGovernmentManage ppsWfGovernmentManage = new PpsWfGovernmentManage();
                        // Bean Copy
                        BeanUtils.copyProperties(ppsGovernmentManage, ppsWfGovernmentManage);
                        ppsWfGovernmentManage.setVersion(version);
                        ppsWfGovernmentManageMapper.insert(ppsWfGovernmentManage);
                        // 管理情報
                        if (ppsGovernmentManageMapper
                                .ppsSelectManageCountByShopClassificationCode(ppsGovernmentManage) > 0) {
                            ppsGovernmentManage.setCreatedUserId(null);
                            ppsGovernmentManage.setCreatedFuncId(null);
                            ppsGovernmentManage.setCreatedAt(null);
                            ppsGovernmentManageMapper.updateByPrimaryKeySelective(ppsGovernmentManage);
                        } else {
                            ppsGovernmentManageMapper.insert(ppsGovernmentManage);
                        }
                        // 看板管理
                        PpsBillboardManage ppsBillboardManage = new PpsBillboardManage();
                        ppsBillboardManage.setShopClassificationCode(shopClassificationCode);
                        ppsBillboardManage.setResponsibleName(ppsGovernmentManage.getOperatingResponsibleName());
                        ppsBillboardManage.setResponsibleMail(ppsGovernmentManage.getOperatingResponsibleMail());
                        ppsBillboardManage.setResponsibleTel(ppsGovernmentManage.getOperatingResponsibleTel());
                        ppsBillboardManage.setUpdatedUserId(USERID);
                        ppsBillboardManage.setUpdatedFuncId(FUNCID);
                        ppsBillboardManage.setIsDeleted(false);
                        ppsBillboardManage.setUpdatedAt(LocalDateTime.now());
                        if (ppsBillboardManageMapper
                                .ppsSelectManageCountByShopClassificationCode(ppsBillboardManage) > 0) {
                            // 更新;
                            ppsBillboardManageMapper.updateByPrimaryKeySelective(ppsBillboardManage);
                        } else {
                            // 挿入
                            ppsBillboardManage.setCreatedUserId(USERID);
                            ppsBillboardManage.setCreatedFuncId(FUNCID);
                            ppsBillboardManage.setCreatedAt(LocalDateTime.now());
                            ppsBillboardManageMapper.insert(ppsBillboardManage);
                        }
                    }
                }

                // 担当者変更WF取込
                if (ppsResponsibleManageList != null) {
                    for (PpsWfResponsibleManage ppsWfResponsibleManage : ppsResponsibleManageList) {
                        ppsWfResponsibleManage.setUpdatedUserId(USERID);
                        ppsWfResponsibleManage.setUpdatedFuncId(FUNCID);
                        ppsWfResponsibleManage.setIsDeleted(false);
                        ppsWfResponsibleManage.setUpdatedAt(LocalDateTime.now());
                        ppsWfResponsibleManage.setCreatedUserId(USERID);
                        ppsWfResponsibleManage.setCreatedFuncId(FUNCID);
                        ppsWfResponsibleManage.setCreatedAt(LocalDateTime.now());
                        ppsWfResponsibleManage.setVersion(version);
                        // 履歴
                        ppsWfResponsibleManageMapper.insert(ppsWfResponsibleManage);
                        PpsGovernmentManage ppsGovernmentManage = new PpsGovernmentManage();
                        // Bean Copy
                        BeanUtils.copyProperties(ppsWfResponsibleManage, ppsGovernmentManage);
                        // 諸官庁管理情報
                        if (ppsGovernmentManageMapper
                                .ppsSelectManageCountByShopClassificationCode(ppsGovernmentManage) > 0) {
                            ppsGovernmentManage.setCreatedUserId(null);
                            ppsGovernmentManage.setCreatedFuncId(null);
                            ppsGovernmentManage.setCreatedAt(null);
                            ppsGovernmentManageMapper.updateByPrimaryKeySelective(ppsGovernmentManage);
                        } else {
                            ppsGovernmentManageMapper.insert(ppsGovernmentManage);
                        }
                        // 看板管理
                        PpsBillboardManage ppsBillboardManage = new PpsBillboardManage();
                        ppsBillboardManage.setShopClassificationCode(shopClassificationCode);
                        ppsBillboardManage.setResponsibleName(ppsWfResponsibleManage.getOperatingResponsibleName());
                        ppsBillboardManage.setResponsibleMail(ppsWfResponsibleManage.getOperatingResponsibleMail());
                        ppsBillboardManage.setResponsibleTel(ppsWfResponsibleManage.getOperatingResponsibleTel());
                        ppsBillboardManage.setUpdatedUserId(USERID);
                        ppsBillboardManage.setUpdatedFuncId(FUNCID);
                        ppsBillboardManage.setIsDeleted(false);
                        ppsBillboardManage.setUpdatedAt(LocalDateTime.now());
                        if (ppsBillboardManageMapper
                                .ppsSelectManageCountByShopClassificationCode(ppsBillboardManage) > 0) {
                            // 更新;
                            ppsBillboardManageMapper.updateByPrimaryKeySelective(ppsBillboardManage);
                        } else {
                            // 挿入
                            ppsBillboardManage.setCreatedUserId(USERID);
                            ppsBillboardManage.setCreatedFuncId(FUNCID);
                            ppsBillboardManage.setCreatedAt(LocalDateTime.now());
                            ppsBillboardManageMapper.insert(ppsBillboardManage);
                        }
                    }
                }

                // 看板管理
                if (PpsConst.WFDIV.WF0000000203.equals(wfId)) {
//                    PpsBillboardManage record = new PpsBillboardManage();
//                    record.setShopClassificationCode(shopClassificationCode);
//                    record.setIsDeleted(true);
//                    record.setUpdatedUserId(USERID);
//                    record.setUpdatedFuncId(FUNCID);
//                    record.setUpdatedAt(LocalDateTime.now());
//                    ppsBillboardManageMapper.updateByPrimaryKeySelective(record);
                } else {
                    if (ppsBillboardManageList != null) {
                        for (PpsBillboardManage ppsBillboardManage : ppsBillboardManageList) {
                            ppsBillboardManage.setIsDeleted(false);
                            ppsBillboardManage.setUpdatedUserId(USERID);
                            ppsBillboardManage.setUpdatedFuncId(FUNCID);
                            ppsBillboardManage.setUpdatedAt(LocalDateTime.now());
                            if (ppsBillboardManageMapper
                                    .ppsSelectManageCountByShopClassificationCode(ppsBillboardManage) > 0) {
                                ppsBillboardManageMapper.updateByPrimaryKeySelective(ppsBillboardManage);
                            } else {
                                ppsBillboardManage.setCreatedUserId(USERID);
                                ppsBillboardManage.setCreatedFuncId(FUNCID);
                                ppsBillboardManage.setCreatedAt(LocalDateTime.now());
                                ppsBillboardManageMapper.insert(ppsBillboardManage);
                            }
                        }
                    }
                }

                // 【撤去看板】看板IDList DB操作フラグ
                if (removalSignboardIdList != null && removalSignboardIdList.size() > 0
                        && (PpsConst.WFDIV.WF0000000205.equals(wfId) || PpsConst.WFDIV.WF0000000206.equals(wfId))) {
                    boolean delFlagFile = false;
                    boolean delFlagBill = false;
                    for (String removalSignboardId : removalSignboardIdList) {
                        if (StringUtils.isNumeric(removalSignboardId)) {
                            // File処理
                            delFlagFile = ppsShopAttFileManageMapper
                                    .deleteAttFileListByBillboardId(Long.valueOf(removalSignboardId)) > 0 ? true
                                            : false;
                            // 看板処理
                            delFlagBill = ppsBillboardDetailMapper
                                    .deleteByPrimaryKeyOfSetBoard(Long.valueOf(removalSignboardId)) > 0 ? true : false;
                        }
                    }
                    // DB再作成
                    // 看板関連DB情報
                    if (delFlagBill) {
                        ppsBillboardDetailMapper.updateByShopClassificationCode(shopClassificationCode);
                        HashMap<String, Object> paramsDetails = new HashMap<>();
                        paramsDetails.put("shopClassificationCode", shopClassificationCode);
                        List<PpsBillboardDetail> billBordEnties = ppsBillboardDetailMapper
                                .selectDetailsInfoList(paramsDetails);
                        for (PpsBillboardDetail ppsBillboardDetail2 : billBordEnties) {
                            ppsBillboardDetailMapper.updateByCountNumberOderBy(ppsBillboardDetail2);
                        }
                    }
                    // FILE再作成
                    // 看板関連File
                    if (delFlagFile) {
                        PpsShopAttFileManage record = new PpsShopAttFileManage();
                        record.setShopClassificationCode(shopClassificationCode);
                        List<PpsShopAttFileManage> attFileBillboardListDB = ppsShopAttFileManageMapper
                                .selectAttFileListByBillboard(record);
                        ppsShopAttFileManageMapper.deleteAttFileListByBillboard(record);
                        for (PpsShopAttFileManage ppsShopAttFileManage2 : attFileBillboardListDB) {
                            ppsShopAttFileManageMapper.insertByBillboard(ppsShopAttFileManage2);
                        }
                    }
                }

                // 看板管理明細 //出店
                if (ppsBillboardDetailList != null || billboardDBlogicFlag) {
                    if (billboardDBlogicFlag) {
                        // 削除
                        ppsBillboardDetailMapper.deleteByShopClassificationCode(shopClassificationCode);
                    }
                    for (PpsBillboardDetail ppsBillboardDetail : ppsBillboardDetailList) {
                        ppsBillboardDetail.setShopClassificationCode(shopClassificationCode);
                        ppsBillboardDetail.setIsDeleted(false);
                        ppsBillboardDetail.setUpdatedUserId(USERID);
                        ppsBillboardDetail.setUpdatedFuncId(FUNCID);
                        ppsBillboardDetail.setUpdatedAt(LocalDateTime.now());
                        ppsBillboardDetail.setCreatedUserId(USERID);
                        ppsBillboardDetail.setCreatedFuncId(FUNCID);
                        ppsBillboardDetail.setCreatedAt(LocalDateTime.now());
                        ppsBillboardDetailMapper.insertSelective(ppsBillboardDetail);
                        // WF看板履歴 WFサイン竣工報告情報
                        PpsWfSignCompletionReportManage ppsWfSignCompletionReportManage = new PpsWfSignCompletionReportManage();
                        // Bean Copy
                        BeanUtils.copyProperties(ppsBillboardDetail, ppsWfSignCompletionReportManage);
                        ppsWfSignCompletionReportManage.setVersion(version);
                        ppsWfSignCompletionReportManageMapper.insertSelective(ppsWfSignCompletionReportManage);
                    }
                }
                // 看板管理明細(WF0000000205,WF0000000206)
                if (ppsBillboardDetailListForInsert != null) {
                    for (PpsBillboardDetail ppsBillboardDetail : ppsBillboardDetailListForInsert) {
                        int countNumber = ppsBillboardDetailMapper.selelctCountNumber(ppsBillboardDetail);
                        ppsBillboardDetail.setCountNumber((short) countNumber);
                        ppsBillboardDetail.setBillboardId(null);
                        ppsBillboardDetail.setShopClassificationCode(shopClassificationCode);
                        ppsBillboardDetail.setIsDeleted(false);
                        ppsBillboardDetail.setCreatedUserId(USERID);
                        ppsBillboardDetail.setCreatedFuncId(FUNCID);
                        ppsBillboardDetail.setCreatedAt(LocalDateTime.now());
                        ppsBillboardDetail.setUpdatedUserId(USERID);
                        ppsBillboardDetail.setUpdatedFuncId(FUNCID);
                        ppsBillboardDetail.setUpdatedAt(LocalDateTime.now());
                        ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail.getImplementationType());
                        ppsBillboardDetailMapper.insertByCountNumberOderBy(ppsBillboardDetail);
                        // WF看板履歴 WFサイン竣工報告情報
                        PpsWfSignCompletionReportManage ppsWfSignCompletionReportManage = new PpsWfSignCompletionReportManage();
                        // Bean Copy
                        BeanUtils.copyProperties(ppsBillboardDetail, ppsWfSignCompletionReportManage);
                        ppsWfSignCompletionReportManage.setVersion(version);
                        ppsWfSignCompletionReportManageMapper.insertSelective(ppsWfSignCompletionReportManage);

                    }
                }

                // 看板管理明細(WF0000000205,WF0000000206)
                if (ppsBillboardDetailListForUpdate != null) {
                    for (PpsBillboardDetail ppsBillboardDetail : ppsBillboardDetailListForUpdate) {
                        ppsBillboardDetail.setShopClassificationCode(shopClassificationCode);
                        ppsBillboardDetail.setIsDeleted(false);
                        ppsBillboardDetail.setCreatedUserId(USERID);
                        ppsBillboardDetail.setCreatedFuncId(FUNCID);
                        ppsBillboardDetail.setCreatedAt(LocalDateTime.now());
                        ppsBillboardDetail.setUpdatedUserId(USERID);
                        ppsBillboardDetail.setUpdatedFuncId(FUNCID);
                        ppsBillboardDetail.setUpdatedAt(LocalDateTime.now());
                        ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail.getImplementationType());
                        ppsBillboardDetailMapper.updateByPrimaryKeySelectiveForWF(ppsBillboardDetail);
                        // WF看板履歴 WFサイン竣工報告情報
                        PpsWfSignCompletionReportManage ppsWfSignCompletionReportManage = new PpsWfSignCompletionReportManage();
                        // Bean Copy
                        BeanUtils.copyProperties(ppsBillboardDetail, ppsWfSignCompletionReportManage);
                        ppsWfSignCompletionReportManage.setVersion(version);
                        ppsWfSignCompletionReportManageMapper.insertSelective(ppsWfSignCompletionReportManage);

                    }
                }

                // 添付ファイル
                if (ppsShopAttFileManageList != null) {
                    // 看板変更
                    boolean logicFlagAtt = false;
                    if (PpsConst.WFDIV.WF0000000205.equals(wfId) || PpsConst.WFDIV.WF0000000206.equals(wfId)) {
                        logicFlagAtt = true;
                    }

                    // 今回WF添付ファイル情報
                    List<PpsShopAttFileManage> attFileBillboardListWF = new ArrayList<PpsShopAttFileManage>();
                    // 削除
                    if (PpsConst.WFDIV.WF0000000201.equals(wfId) || PpsConst.WFDIV.WF0000000202.equals(wfId)) {
                        PpsShopAttFileManage record = new PpsShopAttFileManage();
                        record.setShopClassificationCode(shopClassificationCode);
                        record.setSysType("WF0000000201");
                        ppsShopAttFileManageMapper.deleteByShopClassificationCode(record);
                    }

                    for (PpsShopAttFileManage ppsShopAttFileManage : ppsShopAttFileManageList) {
                        String type = ppsShopAttFileManage.getFileType();
                        ppsShopAttFileManage.setIsDeleted(false);
                        ppsShopAttFileManage.setUpdatedUserId(USERID);
                        ppsShopAttFileManage.setUpdatedFuncId(FUNCID);
                        ppsShopAttFileManage.setUpdatedAt(LocalDateTime.now());
                        ppsShopAttFileManage.setCreatedUserId(USERID);
                        ppsShopAttFileManage.setCreatedFuncId(FUNCID);
                        ppsShopAttFileManage.setCreatedAt(LocalDateTime.now());
                        // WF添付ファイル履歴
                        PpsWfAttfileManage ppsWfAttfileManage = new PpsWfAttfileManage();
                        // Bean Copy
                        BeanUtils.copyProperties(ppsShopAttFileManage, ppsWfAttfileManage);
                        ppsWfAttfileManage.setVersion(version);
                        ppsWfAttfileManageMapper.insert(ppsWfAttfileManage);
                        // WF添付ファイル管理テーブル処理
                        // 看板変更
                        if (logicFlagAtt && (PpsConst.SHOPFILETYPE.SHOPFILETYPE44.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE45.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE46.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE47.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE48.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE49.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE50.equals(type)
                                || PpsConst.SHOPFILETYPE.SHOPFILETYPE51.equals(type))) {
                            attFileBillboardListWF.add(ppsShopAttFileManage);
                            continue;
                        } else {
                            // pash初期化
                            ppsShopAttFileManage.setFilePash("");
                            attFileProcess(ppsShopAttFileManage);
                        }

                    }
                    // 看板写真関連
                    if (logicFlagAtt) {
                        if (attFileBillboardListWF != null && attFileBillboardListWF.size() > 0) {
                            HashMap<String, Object> paramsDetails = new HashMap<>();
                            paramsDetails.put("shopClassificationCode", shopClassificationCode);
                            List<PpsBillboardDetail> billBordEnties = ppsBillboardDetailMapper
                                    .selectDetailsInfoList(paramsDetails);
                            if (billBordEnties == null || billBordEnties.size() == 0) {
                                billBordEnties = new ArrayList<PpsBillboardDetail>();
                            }
                            for (int i = 0; i < attFileBillboardListWF.size(); i++) {
                                PpsShopAttFileManage ppsShopAttFileManage = attFileBillboardListWF.get(i);
                                String type = ppsShopAttFileManage.getFileType();
                                ppsShopAttFileManage.setFilePash("");
                                boolean tlogic = false;
                                // ポール看板
                                if (PpsConst.SHOPFILETYPE.SHOPFILETYPE44.equals(type)) {
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate02) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            PpsBillboardDetail nDetail = new PpsBillboardDetail();
                                            for (PpsBillboardDetail ppsBillboardDetail : billBordEnties) {
                                                if (ppsBillboardDetail.getBillboardId()
                                                        .equals(tDetail.getBillboardId())) {
                                                    // Bean Copy
                                                    BeanUtils.copyProperties(ppsBillboardDetail, nDetail);
                                                    break;
                                                }
                                            }
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(nDetail.getCountNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 自立看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE45.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate03) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            PpsBillboardDetail nDetail = new PpsBillboardDetail();
                                            for (PpsBillboardDetail ppsBillboardDetail : billBordEnties) {
                                                if (ppsBillboardDetail.getBillboardId()
                                                        .equals(tDetail.getBillboardId())) {
                                                    // Bean Copy
                                                    BeanUtils.copyProperties(ppsBillboardDetail, nDetail);
                                                    break;
                                                }
                                            }
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(nDetail.getCountNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 塔屋看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE46.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate05) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            // 面数
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(tDetail.getPagesNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 袖看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE47.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate06) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            PpsBillboardDetail nDetail = new PpsBillboardDetail();
                                            for (PpsBillboardDetail ppsBillboardDetail : billBordEnties) {
                                                if (ppsBillboardDetail.getBillboardId()
                                                        .equals(tDetail.getBillboardId())) {
                                                    // Bean Copy
                                                    BeanUtils.copyProperties(ppsBillboardDetail, nDetail);
                                                    break;
                                                }
                                            }
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(nDetail.getCountNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 壁面看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE48.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate04) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            // 面数
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(tDetail.getPagesNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 駐車場看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE49.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate07) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            PpsBillboardDetail nDetail = new PpsBillboardDetail();
                                            for (PpsBillboardDetail ppsBillboardDetail : billBordEnties) {
                                                if (ppsBillboardDetail.getBillboardId()
                                                        .equals(tDetail.getBillboardId())) {
                                                    // Bean Copy
                                                    BeanUtils.copyProperties(ppsBillboardDetail, nDetail);
                                                    break;
                                                }
                                            }
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(nDetail.getCountNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 集合看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE50.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate08) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            PpsBillboardDetail nDetail = new PpsBillboardDetail();
                                            for (PpsBillboardDetail ppsBillboardDetail : billBordEnties) {
                                                if (ppsBillboardDetail.getBillboardId()
                                                        .equals(tDetail.getBillboardId())) {
                                                    // Bean Copy
                                                    BeanUtils.copyProperties(ppsBillboardDetail, nDetail);
                                                    break;
                                                }
                                            }
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(nDetail.getCountNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                    // 欄間看板
                                } else if (PpsConst.SHOPFILETYPE.SHOPFILETYPE51.equals(type)) {
                                    tlogic = false;
                                    for (PpsBillboardDetail tDetail : ppsBillboardDetailListForWFUpdate01) {
                                        if (tDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            // 面数
                                            ppsShopAttFileManage.setFileNo(Long.valueOf(tDetail.getPagesNumber()));
                                            tlogic = true;
                                        }
                                    }
                                    if (!tlogic) {
                                        ppsShopAttFileManage.setFileNo(
                                                ppsShopAttFileManageMapper.selectAttFileMaxFileNo(ppsShopAttFileManage)
                                                        + 1);
                                    }
                                }
                                if (ppsBillboardDetailListForInsert != null) {
                                    for (PpsBillboardDetail pbDetail : ppsBillboardDetailListForInsert) {
                                        if (pbDetail.getFileSeqid().equals(ppsShopAttFileManage.getFileSeqid())) {
                                            if (PpsConst.SHOPFILETYPE.SHOPFILETYPE51.equals(type)
                                                    || PpsConst.SHOPFILETYPE.SHOPFILETYPE46.equals(type)
                                                    || PpsConst.SHOPFILETYPE.SHOPFILETYPE48.equals(type)) {
                                                ppsShopAttFileManage.setFileNo(Long.valueOf(pbDetail.getPagesNumber()));
                                            } else {
                                                ppsShopAttFileManage.setFileNo(Long.valueOf(pbDetail.getCountNumber()));
                                            }
                                        }
                                    }
                                }
                                attFileProcess(ppsShopAttFileManage);

                            }
                        }
                    }
                }

                // 添付ファイル諸官庁
                if (ppsShopAttFileManageList != null) {
                    for (PpsGovernmentAttfile ppsGovernmentAttfile : ppsGovernmentAttfileList) {
                        ppsGovernmentAttfile.setIsDeleted(false);
                        ppsGovernmentAttfile.setUpdatedUserId(USERID);
                        ppsGovernmentAttfile.setUpdatedFuncId(FUNCID);
                        ppsGovernmentAttfile.setUpdatedAt(LocalDateTime.now());
                        ppsGovernmentAttfile.setCreatedUserId(USERID);
                        ppsGovernmentAttfile.setCreatedFuncId(FUNCID);
                        ppsGovernmentAttfile.setCreatedAt(LocalDateTime.now());
                        ppsGovernmentAttfileMapper.insert(ppsGovernmentAttfile);
                    }
                }

                // ---------data insert end---------------//

                // 非同期情報を設定
                resultMap.put("ppsShopAttFile", ppsShopAttFileManageList);
                resultMap.put("ppsGovernmentAttFile", ppsGovernmentAttfileList);
            }

        }

        return resultMap;

    }

    private void insertSpecDbInfo(List<PpsSpecialFurnitureManage> ppsWfSpecialFurniturekList) {
        PpsSpecManage record = new PpsSpecManage();
        record.setShopClassificationCode(ppsWfSpecialFurniturekList.get(0).getShopClassificationCode());
        int count = ppsSpecManageMapper.ppsSelectManageCountByShopClassificationCode(record);
        // メーカー選択
        String makerSelection = ppsWfSpecialFurniturekList.get(0).getMakerSelection();
        // 什器名称（詳細）で設定
        if (PpsConst.FURNITURETYPE.ACEPFURNITURETYPE_NAME.equals(makerSelection)) {
            record.setAcType(ppsWfSpecialFurniturekList.get(0).getFurnitureDetailName());
            // ACEP/CEP導入日
            record.setAcImpDate(ppsWfSpecialFurniturekList.get(0).getConstructionDate());
        } else if (PpsConst.FURNITURETYPE.GOOGLEFURNITURETYPE_NAME.equals(makerSelection)) {
            record.setGoogleType(ppsWfSpecialFurniturekList.get(0).getFurnitureDetailName());
            // Google導入日
            record.setGoogelImpDate(ppsWfSpecialFurniturekList.get(0).getConstructionDate());
        } else if (PpsConst.FURNITURETYPE.FIVEGLEFURNITURETYPE_NAME.equals(makerSelection)) {
            record.setSmartType(PpsConst.FURNITURETYPE.FURNITURETYPE_HAS_STR);
            // 5G導入日
            record.setSmartImpDate(ppsWfSpecialFurniturekList.get(0).getConstructionDate());
        } else if (PpsConst.FURNITURETYPE.BALMUDAFURNITURETYPE_NAME.equals(makerSelection)) {
            record.setBalmudaType(PpsConst.FURNITURETYPE.FURNITURETYPE_HAS_STR);
            // BALMUDA導入日
            record.setBalmudaDate(ppsWfSpecialFurniturekList.get(0).getConstructionDate());
        }
        record.setAgencyStoreName(ppsWfSpecialFurniturekList.get(0).getAgencyStoreName());
        record.setAgencyStoreCode(ppsWfSpecialFurniturekList.get(0).getAgencyStoreCode());
        record.setUpdatedUserId(USERID);
        record.setUpdatedFuncId(FUNCID);
        record.setIsDeleted(false);
        record.setUpdatedAt(LocalDateTime.now());
        if (count > 0) {
            // 更新
            ppsSpecManageMapper.updateByPrimaryKeySelective(record);
        } else {
            // 挿入
            record.setCreatedUserId(USERID);
            record.setCreatedFuncId(FUNCID);
            record.setCreatedAt(LocalDateTime.now());
            ppsSpecManageMapper.insertSelective(record);
        }

    }

    private void insertSpecialFurnitureInfo(List<PpsSpecialFurnitureManage> ppsWfSpecialFurniturekList,
            String execWfId) {
        PpsSpecialFurnitureManage furnitureDto = ppsWfSpecialFurniturekList.get(0);
        PpsSpecialFurnitureManage inserRecord = new PpsSpecialFurnitureManage();
        inserRecord.setShopClassificationCode(furnitureDto.getShopClassificationCode());
        // WF実行id
        inserRecord.setExecWfId(execWfId);
        // 会社名
        inserRecord.setMakerCompanyName(furnitureDto.getMakerCompanyName());
        // 担当者名
        inserRecord.setMakerPersonName(furnitureDto.getMakerPersonName());
        // ﾒｰﾙｱﾄﾞﾚｽ
        inserRecord.setMakerMail(furnitureDto.getMakerMail());
        // 電話番号
        inserRecord.setMakerTel(furnitureDto.getMakerTel());
        // 店舗名
        inserRecord.setAgencyStoreName(furnitureDto.getAgencyStoreName());
        // 取次店コード
        inserRecord.setAgencyStoreCode(furnitureDto.getAgencyStoreCode());
        // 什器名称
        inserRecord.setFurnitureName(furnitureDto.getFurnitureName());
        // 什器名称（詳細）
        inserRecord.setFurnitureDetailName(furnitureDto.getFurnitureDetailName());
        // メーカー申請者コメント
        inserRecord.setProvisionalapplicantComment(furnitureDto.getProvisionalapplicantComment());
        // 会社名
        inserRecord.setAgencyCompanyName(furnitureDto.getAgencyCompanyName());
        // 担当者名
        inserRecord.setAgencyPersonName(furnitureDto.getAgencyPersonName());
        // ﾒｰﾙｱﾄﾞﾚｽ
        inserRecord.setAgencyMail(furnitureDto.getAgencyMail());
        // 電話番号
        inserRecord.setAgencyTel(furnitureDto.getAgencyTel());
        // 店舗担当者名
        inserRecord.setStoreRepresentativeName(furnitureDto.getStoreRepresentativeName());
        // 役職
        inserRecord.setPost(furnitureDto.getPost());
        // 店舗担当者ﾒｰﾙｱﾄﾞﾚｽ
        inserRecord.setStoreRepresentativeMail(furnitureDto.getStoreRepresentativeMail());
        // 店舗担当者電話番号
        inserRecord.setStoreRepresentativeTel(furnitureDto.getStoreRepresentativeTel());
        // 仮承認
        inserRecord.setProvisionalApproval(furnitureDto.getProvisionalApproval());
        // 承認者コメント
        inserRecord.setProvisionalApprovalComment(furnitureDto.getProvisionalApprovalComment());
        // 施工日
        inserRecord.setConstructionDate(furnitureDto.getConstructionDate());
        // 施工時刻
        inserRecord.setConstructionTime(furnitureDto.getConstructionTime());
        // 申請者コメント
        inserRecord.setApplicantComment(furnitureDto.getApplicantComment());
        // 本承認
        inserRecord.setApproval(furnitureDto.getApproval());
        // 承認者コメント
        inserRecord.setApprovalComment(furnitureDto.getApprovalComment());
        // 図面更新
        inserRecord.setDrawingRenew(furnitureDto.getDrawingRenew());
        // メーカー選択
        inserRecord.setMakerSelection(furnitureDto.getMakerSelection());
        // レイアウト設計会社
        inserRecord.setLayoutDesignCompanyName(furnitureDto.getLayoutDesignCompanyName());
        // レイアウト設計会社コード
        inserRecord.setLayoutDesignCompanyCode(furnitureDto.getLayoutDesignCompanyCode());
        // 最終承認
        inserRecord.setFinalApproval(furnitureDto.getFinalApproval());
        inserRecord.setCreatedAt(LocalDateTime.now());
        inserRecord.setCreatedFuncId(FUNCID);
        inserRecord.setCreatedUserId(USERID);
        inserRecord.setIsDeleted(false);
        inserRecord.setUpdatedUserId(USERID);
        inserRecord.setUpdatedFuncId(FUNCID);
        inserRecord.setUpdatedAt(LocalDateTime.now());
        ppsSpecialFurnitureManageMapper.insert(inserRecord);

    }

    private void attFileProcess(PpsShopAttFileManage ppsShopAttFileManage) {
        if (ppsShopAttFileManageMapper.selectFileCount(ppsShopAttFileManage) > 0) {
            ppsShopAttFileManageMapper.updateByPrimaryKeySelective(ppsShopAttFileManage);
        } else {
            ppsShopAttFileManageMapper.insert(ppsShopAttFileManage);
        }
    }

    /**
     * 添付ファイルフォーマット処理
     * 
     * @param fileDtoList
     * @param ppsShopAttFileManageList
     * @param wfId
     * @param appNo
     * @param taskId
     */
    private void fileInfoProcess(List<FileDto> fileDtoList, List<PpsShopAttFileManage> ppsShopAttFileManageList,
            List<PpsGovernmentAttfile> ppsGovernmentAttfileList, String wfId, String appNo, String taskId,
            String execWfId, LocalDate licenseStartDate, LocalDate nextUpdateDate) {
        if (fileDtoList != null) {
            // 出店_その他COUNT
            int tcount3 = 1;
            // サイン計画申請_申請看板図面count
            int tcount6 = 1;
            // 【書類一式】屋外広告物許可書count
            int tcount8 = 1;
            // 【書類一式】道路占用許可書count
            int tcount9 = 1;
            // 【書類一式】工作物確認済証
            int tcount10 = 1;
            // サイン竣工図書完成報告_申請看板図面count
            int tcount35 = 1;
            // 看板撤去写真提出_看板撤去写真
            int tcount41 = 1;
            // 請求書エビデンス申請_請求書エビデンス
            int tcount42 = 1;
            // 出店エビデンス確認申請書
            int tcount43 = 1;
            // 【ポール看板】写真
            int tcount44 = 1;
            // 【自立看板】写真
            int tcount45 = 1;
            // 【塔屋看板】写真
            int tcount46 = 1;
            // 【袖看板】写真
            int tcount47 = 1;
            // 【壁面看板】写真
            int tcount48 = 1;
            // 【駐車場看板】写真
            int tcount49 = 1;
            // 【集合看板】写真
            int tcount50 = 1;
            // 【欄間看板】写真
            int tcount51 = 1;
            // 欄間/その他看板工事_請求書エビデンス
            int tcount54 = 1;
            // 店舗工事_請求書エビデンス
            int tcount55 = 1;
            // 什器_請求書エビデンス
            int tcount56 = 1;
            // 特別什器写真(JPG)
            int tcount61 = 1;
            for (FileDto fileDto : fileDtoList) {
                switch (fileDto.getFormComponentId()) {
                // 出店_地図・画像提出FMT単
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG01:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE01, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト図面
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG02:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE02, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 出店_敷地図
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG03:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE03, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 出店_その他
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG04_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG04_2:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG04_3:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE04, fileDto, appNo,
                            taskId, execWfId, tcount3++);
                    break;
                // 出店_【任意】物件家賃が確認できる資料
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG05:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE05, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // サイン計画申請_申請看板図面
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG06_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG06_2:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG06_3:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE06, fileDto, appNo,
                            taskId, execWfId, tcount6++);
                    break;
                // サイン計画承認_添付ファイル
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG07:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE07, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 諸官庁申請申請_【書類一式】屋外広告物許可書
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG08_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG08_2:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG08_3:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE08, fileDto, appNo,
                            taskId, execWfId, tcount8++);
                    setFileInfoGovernment(ppsGovernmentAttfileList, PpsConst.SHOPFILETYPE.SHOPFILETYPE08, fileDto,
                            appNo, execWfId, licenseStartDate, nextUpdateDate);
                    break;
                // 諸官庁申請申請_【書類一式】道路占用許可書
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG09_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG09_2:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG09_3:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE09, fileDto, appNo,
                            taskId, execWfId, tcount9++);
                    setFileInfoGovernment(ppsGovernmentAttfileList, PpsConst.SHOPFILETYPE.SHOPFILETYPE09, fileDto,
                            appNo, execWfId, licenseStartDate, nextUpdateDate);
                    break;
                // 諸官庁申請申請_【書類一式】工作物確認済証
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG10_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG10_2:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG10_3:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE10, fileDto, appNo,
                            taskId, execWfId, tcount10++);
                    setFileInfoGovernment(ppsGovernmentAttfileList, PpsConst.SHOPFILETYPE.SHOPFILETYPE10, fileDto,
                            appNo, execWfId, licenseStartDate, nextUpdateDate);
                    break;
                // 諸官庁申請承認_添付ファイル
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG11:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE11, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト申請_平面図
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG12:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE12, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト申請_仕上表
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG13:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE13, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト申請_展開図
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG14:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE14, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト申請_立面図
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG15:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE15, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト申請_その他
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG16:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE16, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // レイアウト申請_添付ファイル
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG17:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE17, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG18:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE18, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_平面図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG19:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE19, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_弱電図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG20:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE20, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_コンセント図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG21:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE21, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_天伏図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG22:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE22, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_立面図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG23:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE23, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_展開図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG24:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE24, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_仕上げ表(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG25:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE25, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_その他(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG26:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE26, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_平面図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG27:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE27, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_弱電図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG28:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE28, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_コンセント図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG29:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE29, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_天伏図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG30:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE30, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_立面図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG31:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE31, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_展開図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG32:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE32, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_仕上げ表(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG33:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE33, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 竣工図書報告_その他(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG34:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE34, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // サイン竣工図書完成報告_申請看板図面
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG35_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG35_2:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG35_3:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE35, fileDto, appNo,
                            taskId, execWfId, tcount35++);
                    break;
                // サイン竣工図書完成報告_写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG36:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE36, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // サイン竣工図書完成報告_配置図
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG37:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE37, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 店舗写真提出_店舗写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG38:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE38, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 店舗写真承認_添付ファイル
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG39:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE39, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 建物・駐車場配置図申請
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG40:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE40, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 看板撤去写真提出_看板撤去写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG41_1:
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG41_2:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE41, fileDto, appNo,
                            taskId, execWfId, tcount41++);
                    break;
                // 請求書エビデンス申請_請求書エビデンス
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG42:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE42, fileDto, appNo,
                            taskId, execWfId, tcount42++);
                    break;
                // 出店エビデンス確認申請書
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG43:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE43, fileDto, appNo,
                            taskId, execWfId, tcount43++);
                    break;
                // 【ポール看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG44:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE44, fileDto, appNo,
                            taskId, execWfId, tcount44++);
                    break;
                // 【自立看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG45:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE45, fileDto, appNo,
                            taskId, execWfId, tcount45++);
                    break;
                // 【塔屋看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG46:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE46, fileDto, appNo,
                            taskId, execWfId, tcount46++);
                    break;
                // 【袖看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG47:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE47, fileDto, appNo,
                            taskId, execWfId, tcount47++);
                    break;
                // 【壁面看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG48:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE48, fileDto, appNo,
                            taskId, execWfId, tcount48++);
                    break;
                // 【駐車場看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG49:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE49, fileDto, appNo,
                            taskId, execWfId, tcount49++);
                    break;
                // 【集合看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG50:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE50, fileDto, appNo,
                            taskId, execWfId, tcount50++);
                    break;
                // 【欄間看板】写真
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG51:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE51, fileDto, appNo,
                            taskId, execWfId, tcount51++);
                    break;
                // 出店エビデンス確認申請書（Excel）
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG52:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE52, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 出店エビデンス確認申請書（csv）
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG53:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE53, fileDto, appNo,
                            taskId, execWfId, 1);
                    break;
                // 欄間/その他看板工事_請求書エビデンス
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG54:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE54, fileDto, appNo,
                            taskId, execWfId, tcount54++);
                    break;
                // 店舗工事_請求書エビデンス
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG55:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE55, fileDto, appNo,
                            taskId, execWfId, tcount55++);
                    break;
                // 什器_請求書エビデンス
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG56:
                    setFileInfo(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE56, fileDto, appNo,
                            taskId, execWfId, tcount56++);
                    break;
                // 特別什器図面
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG57:
                    setFileInfoForSpecialFurniture(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE57,
                            fileDto, appNo, taskId, execWfId, 1);
                    break;
                // 特別什器平面図(PDF)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG58:
                    setFileInfoForSpecialFurniture(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE58,
                            fileDto, appNo, taskId, execWfId, 1);
                    break;
                // 特別什器平面図(CAD)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG59:
                    setFileInfoForSpecialFurniture(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE59,
                            fileDto, appNo, taskId, execWfId, 1);
                    break;
                // 特別什器その他添付ファイル
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG60:
                    setFileInfoForSpecialFurniture(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE60,
                            fileDto, appNo, taskId, execWfId, 1);
                    break;
                // 特別什器写真(JPG)
                case PpsConst.SHOPFILETYPE.SHOPFILETYPEENG61:
                    setFileInfoForSpecialFurniture(ppsShopAttFileManageList, wfId, PpsConst.SHOPFILETYPE.SHOPFILETYPE61,
                            fileDto, appNo, taskId, execWfId, tcount61++);
                    break;
                default:
                    break;
                }
            }
        }
    }

    /**
     * 添付ファイル情報設置
     * 
     * @param ppsShopAttFileManageList
     * @param wfId
     * @param fileType
     * @param fileDto
     * @param appNo
     * @param taskId
     * @param fileNo
     */
    private void setFileInfo(List<PpsShopAttFileManage> ppsShopAttFileManageList, String wfId, String fileType,
            FileDto fileDto, String appNo, String taskId, String execWfId, long fileNo) {
        if (fileDto != null) {
            PpsShopAttFileManage fileManage = new PpsShopAttFileManage();
            fileManage.setShopClassificationCode(appNo);
            fileManage.setSysType(PpsConst.WFDIV.WF0000000201);
            fileManage.setFileType(fileType);
            fileManage.setFileName(fileDto.getFileName());
            fileManage.setFilePash(fileDto.getFilePath());
            fileManage.setFileSeqid(fileDto.getFileSeqId());
            fileManage.setFileTaskid(taskId);
            fileManage.setFileNo(fileNo);
            fileManage.setExecWfId(execWfId);
            ppsShopAttFileManageList.add(fileManage);
        }
    }

    /**
     * 添付ファイル情報設置
     * 
     * @param ppsShopAttFileManageList
     * @param wfId
     * @param fileType
     * @param fileDto
     * @param appNo
     * @param taskId
     * @param fileNo
     */
    private void setFileInfoForSpecialFurniture(List<PpsShopAttFileManage> ppsShopAttFileManageList, String wfId,
            String fileType, FileDto fileDto, String appNo, String taskId, String execWfId, long fileNo) {
        if (fileDto != null) {
            PpsShopAttFileManage fileManage = new PpsShopAttFileManage();
            fileManage.setShopClassificationCode(appNo);
            fileManage.setSysType(execWfId);
            fileManage.setFileType(fileType);
            fileManage.setFileName(fileDto.getFileName());
            fileManage.setFilePash(fileDto.getFilePath());
            fileManage.setFileSeqid(fileDto.getFileSeqId());
            fileManage.setFileTaskid(taskId);
            fileManage.setFileNo(fileNo);
            fileManage.setExecWfId(execWfId);
            ppsShopAttFileManageList.add(fileManage);
        }
    }

    /**
     * 添付ファイル情報設置
     * 
     * @param ppsGovernmentAttfileList
     * @param execWfId
     * @param fileType
     * @param fileDto
     * @param appNo
     */
    private void setFileInfoGovernment(List<PpsGovernmentAttfile> ppsGovernmentAttfileList, String fileType,
            FileDto fileDto, String appNo, String execWfId, LocalDate licenseStartDate, LocalDate nextUpdateDate) {
        if (fileDto != null) {
            PpsGovernmentAttfile fileManage = new PpsGovernmentAttfile();
            fileManage.setShopClassificationCode(appNo);
            fileManage.setFileType(fileType);
            fileManage.setFileName(fileDto.getFileName());
            fileManage.setFilePash(fileDto.getFilePath());
            fileManage.setFileSeqid(fileDto.getFileSeqId());
            fileManage.setExecWfId(execWfId);
            fileManage.setLicenseStartDate(licenseStartDate);
            fileManage.setNextUpdateDate(nextUpdateDate);
            ppsGovernmentAttfileList.add(fileManage);
        }
    }

    /**
     * 看板管理DB情報設置
     * 
     * @param p_jsonStr
     * @param ppsBillboardManageList
     * @param ppsBillboardDetailList
     * @throws PPEBusinessErrorException
     */
    private void setBillboardInfo(String p_jsonStr, List<PpsBillboardManage> ppsBillboardManageList,
            List<PpsWfSignApplicationManage> wfSignAppist, List<PpsBillboardDetail> ppsBillboardDetailList)
            throws PPEBusinessErrorException {
        /**************** 看板管理start ********************************/
        if (ppsBillboardManageList != null && ppsBillboardManageList.size() > 0 && wfSignAppist != null
                && wfSignAppist.size() > 0) {
            PpsBillboardManage ppsBillboardManage = ppsBillboardManageList.get(0);
            PpsWfSignApplicationManage ppsWfSignApplicationManage = wfSignAppist.get(0);
            // Bean Copy
            BeanUtils.copyProperties(ppsWfSignApplicationManage, ppsBillboardManage);
        }
        /**************** 看板管理end ********************************/

        /**************** 【欄間看板】start ********************************/
        // 【欄間看板】
        String commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFTransomSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFTransomSignboardDto> commonTransomSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFTransomSignboardDto>>() {
                }.getType());
        List<PpsStoreWFTransomSignboardDto> transomSignboardDtoList = commonTransomSignboardDto.getItemsDto();
        List<PpsBillboardDetail> transomSignboardDetailList = gson.fromJson(JSON.toJSONString(transomSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        short t_count = transomSignboardDetailList != null ? (short) transomSignboardDetailList.size() : 0;
        // 業務チェック
        if (t_count > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE01NAME, "5面"));
        }
        for (int i = 0; i < t_count; i++) {
            PpsBillboardDetail ppsBillboardDetail = transomSignboardDetailList.get(i);
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE01);
            ppsBillboardDetail.setCountNumber((short) 1);
            ppsBillboardDetail.setPagesNumber((short) (i + 1));
            ppsBillboardDetailList.add(ppsBillboardDetail);
        }
        /**************** 【欄間看板】end ********************************/

        /**************** 【ポール看板】start ********************************/
        // 【ポール看板
        // 上段
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPoleSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFPoleSignboardDto> commonPoleSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFPoleSignboardDto>>() {
                }.getType());
        List<PpsStoreWFPoleSignboardDto> poleSignboardDtoList = commonPoleSignboardDto.getItemsDto();
        List<PpsBillboardDetail> poleSignboardDetailList = gson.fromJson(JSON.toJSONString(poleSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short pole = poleSignboardDetailList != null ? (short) poleSignboardDetailList.size() : 0;

        // 下段
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPoleSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFPoleSignboardDto2> commonPoleSignboardDto2 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFPoleSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFPoleSignboardDto2> poleSignboardDtoList2 = commonPoleSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> poleSignboardDetailList2 = gson.fromJson(JSON.toJSONString(poleSignboardDtoList2),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        // 業務チェック
        if (pole > 2) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE02NAME, "2台"));
        }
        // 枠を作る
        for (int i = 0; i < pole; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < pole ? poleSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < pole ? poleSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE02);
            ppsBillboardDetail.setCountNumber((short) (i + 1));
            // 上段
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            ppsBillboardDetailList.add(t1_ppsBillboardDetail);
            // 下段
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            ppsBillboardDetailList.add(t2_ppsBillboardDetail);
        }
        /**************** 【ポール看板】end ********************************/

        /**************** 【自立看板】start ********************************/
        // 【自立看板】
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFStandingSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFStandingSignboardDto> commonStandingSignboardDto = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFStandingSignboardDto>>() {
                }.getType());
        List<PpsStoreWFStandingSignboardDto> standingSignboardDtoList = commonStandingSignboardDto.getItemsDto();
        List<PpsBillboardDetail> standingSignboardDetailList = gson
                .fromJson(JSON.toJSONString(standingSignboardDtoList), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short stand = standingSignboardDetailList != null ? (short) standingSignboardDetailList.size() : 0;

        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFStandingSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFStandingSignboardDto2> commonStandingSignboardDto2 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFStandingSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFStandingSignboardDto2> standingSignboardDtoList2 = commonStandingSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> standingSignboardDetailList2 = gson
                .fromJson(JSON.toJSONString(standingSignboardDtoList2), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        // 業務チェック
        if (stand > 2) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE03NAME, "2台"));
        }
        // 枠を作る
        for (int i = 0; i < stand; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < stand ? standingSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < stand ? standingSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE03);
            ppsBillboardDetail.setCountNumber((short) (i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            ppsBillboardDetailList.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            ppsBillboardDetailList.add(t2_ppsBillboardDetail);
        }
        /**************** 【自立看板】end ********************************/

        /**************** 【塔屋看板】start ********************************/
        // 【塔屋看板】
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPenthouseSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFPenthouseSignboardDto> commonPenthouseSignboardDto = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFPenthouseSignboardDto>>() {
                }.getType());
        List<PpsStoreWFPenthouseSignboardDto> penthouseSignboardDtoList = commonPenthouseSignboardDto.getItemsDto();
        List<PpsBillboardDetail> penthouseSignboardDetailList = gson
                .fromJson(JSON.toJSONString(penthouseSignboardDtoList), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short penthouse_count = penthouseSignboardDetailList != null ? (short) penthouseSignboardDetailList.size() : 0;
        // 業務チェック
        if (penthouse_count > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE05NAME, "5面"));
        }
        for (int i = 0; i < penthouse_count; i++) {
            PpsBillboardDetail ppsBillboardDetail = penthouseSignboardDetailList.get(i);
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE05);
            ppsBillboardDetail.setCountNumber((short) 1);
            ppsBillboardDetail.setPagesNumber((short) (i + 1));
            ppsBillboardDetailList.add(ppsBillboardDetail);
        }
        /**************** 【塔屋看板】end ********************************/

        /**************** 【袖看板】start ********************************/
        // 【袖看板】
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto> commonSideSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto> sideSignboardDtoList = commonSideSignboardDto.getItemsDto();
        List<PpsBillboardDetail> sideSignboardDetailList = gson.fromJson(JSON.toJSONString(sideSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short side = sideSignboardDetailList != null ? (short) sideSignboardDetailList.size() : 0;
        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto2> commonSideSignboardDto2 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto2> sideSignboardDtoList2 = commonSideSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> sideSignboardDetailList2 = gson.fromJson(JSON.toJSONString(sideSignboardDtoList2),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        // 盤面③
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto3.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto3> commonSideSignboardDto3 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto3>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto3> sideSignboardDtoList3 = commonSideSignboardDto3.getItemsDto();
        List<PpsBillboardDetail> sideSignboardDetailList3 = gson.fromJson(JSON.toJSONString(sideSignboardDtoList3),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        // 業務チェック
        if (side > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE06NAME, "5台"));
        }
        // 枠を作る
        for (int i = 0; i < side; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < side ? sideSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < side ? sideSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail3 = i < side ? sideSignboardDetailList3.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE06);
            ppsBillboardDetail.setCountNumber((short) (i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            ppsBillboardDetailList.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            ppsBillboardDetailList.add(t2_ppsBillboardDetail);
            // 盤面③
            PpsBillboardDetail t3_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t3_ppsBillboardDetail);
            t3_ppsBillboardDetail.setPagesNumber((short) 3);
            t3_ppsBillboardDetail.setBrand(ppsBillboardDetail3.getBrand());
            t3_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail3.getDisplayFormat());
            t3_ppsBillboardDetail.setWidth(ppsBillboardDetail3.getWidth());
            t3_ppsBillboardDetail.setHeight(ppsBillboardDetail3.getHeight());
            ppsBillboardDetailList.add(t3_ppsBillboardDetail);
        }
        /**************** 【袖看板】end ********************************/

        /**************** 【壁面看板】start ********************************/
        // 【壁面看板】
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFWallSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFWallSignboardDto> commonWallSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFWallSignboardDto>>() {
                }.getType());
        List<PpsStoreWFWallSignboardDto> wallSignboardDtoList = commonWallSignboardDto.getItemsDto();
        List<PpsBillboardDetail> wallSignboardDetailList = gson.fromJson(JSON.toJSONString(wallSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short wall_count = wallSignboardDetailList != null ? (short) wallSignboardDetailList.size() : 0;
        // 業務チェック
        if (wall_count > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE04NAME, "5面"));
        }
        for (int i = 0; i < wall_count; i++) {
            PpsBillboardDetail ppsBillboardDetail = wallSignboardDetailList.get(i);
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE04);
            ppsBillboardDetail.setCountNumber((short) 1);
            ppsBillboardDetail.setPagesNumber((short) (i + 1));
            ppsBillboardDetailList.add(ppsBillboardDetail);
        }
        /**************** 【壁面看板】end ********************************/

        /**************** 【駐車場看板】start ********************************/
        // 【駐車場看板】
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFParkingSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFParkingSignboardDto> commonParkingSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFParkingSignboardDto>>() {
                }.getType());
        List<PpsStoreWFParkingSignboardDto> parkingSignboardDtoList = commonParkingSignboardDto.getItemsDto();
        List<PpsBillboardDetail> parkingSignboardDetailList = gson.fromJson(JSON.toJSONString(parkingSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short parking = parkingSignboardDetailList != null ? (short) parkingSignboardDetailList.size() : 0;

        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFParkingSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFParkingSignboardDto2> commonParkingSignboardDto2 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFParkingSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFParkingSignboardDto2> parkingSignboardDtoList2 = commonParkingSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> parkingSignboardDetailList2 = gson
                .fromJson(JSON.toJSONString(parkingSignboardDtoList2), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        // 業務チェック
        if (parking > 7) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE07NAME, "7台"));
        }
        // 枠を作る
        for (int i = 0; i < parking; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < parking ? parkingSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < parking ? parkingSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE07);
            ppsBillboardDetail.setCountNumber((short) (i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            ppsBillboardDetailList.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            ppsBillboardDetailList.add(t2_ppsBillboardDetail);
        }
        /**************** 【駐車場看板】end ********************************/

        /**************** 【集合看板】start ********************************/
        // 【集合看板】
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFCollectiveSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto> commonCollectiveSignboardDto = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto>>() {
                }.getType());
        List<PpsStoreWFCollectiveSignboardDto> collectiveSignboardDtoList = commonCollectiveSignboardDto.getItemsDto();
        List<PpsBillboardDetail> collectiveSignboardDetailList = gson
                .fromJson(JSON.toJSONString(collectiveSignboardDtoList), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short collective = collectiveSignboardDetailList != null ? (short) collectiveSignboardDetailList.size() : 0;

        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFCollectiveSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto2> commonCollectiveSignboardDto2 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFCollectiveSignboardDto2> collectiveSignboardDtoList2 = commonCollectiveSignboardDto2
                .getItemsDto();
        List<PpsBillboardDetail> collectiveSignboardDetailList2 = gson
                .fromJson(JSON.toJSONString(collectiveSignboardDtoList2), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        // 業務チェック
        if (collective > 3) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE08NAME, "3台"));
//            throw new PPEBusinessErrorException(PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE08NAME,"3台"));
        }
        // 枠を作る
        for (int i = 0; i < collective; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < collective ? collectiveSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < collective ? collectiveSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE08);
            ppsBillboardDetail.setCountNumber((short) (i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            ppsBillboardDetailList.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            ppsBillboardDetailList.add(t2_ppsBillboardDetail);
        }
        /**************** 【集合看板】end ********************************/

        // 業務チェック
        String msg = appItemErrMsg.toString();
        if (StringUtils.isNotEmpty(msg)) {
            if (msg.indexOf("\r\n") == 0) {
                msg = msg.substring(2);
            }
            throw new PPEBusinessErrorException(msg);
        }
    }

    /**
     * 看板管理DB情報設置(改装専用)
     * 
     * @param p_jsonStr
     * @param ppsBillboardManageList
     * @param wfSignAppist
     * @param ppsBillboardDetailListForInsert
     * @param ppsBillboardDetailListForUpdate
     * @param shopClassificationCode
     * @throws PPEBusinessErrorException
     */
    private void setBillboardInfoForRemodelling(String p_jsonStr, List<PpsBillboardManage> ppsBillboardManageList,
            List<PpsWfSignApplicationManage> wfSignAppist, List<PpsBillboardDetail> ppsBillboardDetailListForInsert,
            List<PpsBillboardDetail> ppsBillboardDetailListForUpdate, String shopClassificationCode,
            List<String> dataList, List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate01,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate02,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate03,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate04,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate05,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate06,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate07,
            List<PpsBillboardDetail> ppsBillboardDetailListForWFUpdate08) throws PPEBusinessErrorException {
        HashMap<String, Object> paramsDetails = new HashMap<>();
        paramsDetails.put("shopClassificationCode", shopClassificationCode);
        List<PpsBillboardDetail> enties = ppsBillboardDetailMapper.selectDetailsInfoList(paramsDetails);
        // 撤去看板IDのLIST
        List<String> removalIdList = new ArrayList<String>();
        if (dataList != null && dataList.size() > 0) {
            removalIdList = ppsBillboardDetailMapper.getSignboardOyaInfoIdList(dataList);
        }
        // 看板
        List<PpsBillboardDetail> transomEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> poleEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> standEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> penthouseEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> sideEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> wallEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> parkingEnties = new ArrayList<PpsBillboardDetail>();
        List<PpsBillboardDetail> collectiveEnties = new ArrayList<PpsBillboardDetail>();
        short transom_size = 0;
        short pole_size = 0;
        short stand_size = 0;
        short wall_size = 0;
        short penthouse_size = 0;
        short side_size = 0;
        short parking_size = 0;
        short collective_size = 0;
        if (enties != null && enties.size() > 0) {
            for (PpsBillboardDetail detailsDto : enties) {
                // 撤去IDの場合、スキップする
                if (removalIdList != null && removalIdList.contains(detailsDto.getBillboardId().toString())) {
                    continue;
                }
                String billboardType = detailsDto.getBillboardType();
                // 10:欄間看板
                if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE01.equals(billboardType)) {
                    transomEnties.add(detailsDto);
                    transom_size++;
                    // 20:ポール看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE02.equals(billboardType)) {
                    poleEnties.add(detailsDto);
                    pole_size++;
                    // 30:自立看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE03.equals(billboardType)) {
                    standEnties.add(detailsDto);
                    stand_size++;
                    // 40:壁面看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE04.equals(billboardType)) {
                    wallEnties.add(detailsDto);
                    wall_size++;
                    // 50:塔屋看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE05.equals(billboardType)) {
                    penthouseEnties.add(detailsDto);
                    penthouse_size++;
                    // 60:袖看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE06.equals(billboardType)) {
                    sideEnties.add(detailsDto);
                    side_size++;
                    // 70:駐車場看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE07.equals(billboardType)) {
                    parkingEnties.add(detailsDto);
                    parking_size++;
                    // 80:集合看板
                } else if (PpsConst.BILLBOARDTYPE.BILLBOARDTYPE08.equals(billboardType)) {
                    collectiveEnties.add(detailsDto);
                    collective_size++;
                }
            }
        }
        /**************** 看板管理start ********************************/
        if (ppsBillboardManageList != null && ppsBillboardManageList.size() > 0 && wfSignAppist != null
                && wfSignAppist.size() > 0) {
            PpsBillboardManage ppsBillboardManage = ppsBillboardManageList.get(0);
            PpsWfSignApplicationManage ppsWfSignApplicationManage = wfSignAppist.get(0);
            // Bean Copy
            BeanUtils.copyProperties(ppsWfSignApplicationManage, ppsBillboardManage);
        }
        /**************** 看板管理end ********************************/
        /**************** 【欄間看板】start ********************************/
        // 【欄間看板】
        String commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFTransomSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFTransomSignboardDto> commonTransomSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFTransomSignboardDto>>() {
                }.getType());
        List<PpsStoreWFTransomSignboardDto> transomSignboardDtoList = commonTransomSignboardDto.getItemsDto();
        List<PpsBillboardDetail> transomSignboardDetailList = gson.fromJson(JSON.toJSONString(transomSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());

        short t_count = transomSignboardDetailList != null ? (short) transomSignboardDetailList.size() : 0;
        short t_transom_size = 0;
        for (int i = 0; i < t_count; i++) {
            PpsBillboardDetail ppsBillboardDetail = transomSignboardDetailList.get(i);
            String t_type = ppsBillboardDetail.getImplementationType();
            if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(t_type)) {
                // 変更用看板写真LIST
                for (PpsBillboardDetail item : transomEnties) {
                    if (item.getBillboardId().equals(ppsBillboardDetail.getBillboardId())) {
                        item.setBoardType(ppsBillboardDetail.getBoardType());
                        item.setTotalHeight(ppsBillboardDetail.getTotalHeight());
                        item.setBrand(ppsBillboardDetail.getBrand());
                        item.setDisplayFormat(ppsBillboardDetail.getDisplayFormat());
                        item.setWidth(ppsBillboardDetail.getWidth());
                        item.setHeight(ppsBillboardDetail.getHeight());
                        item.setInstallationLocation(ppsBillboardDetail.getInstallationLocation());
                        // fileSeqid
                        item.setFileSeqid(ppsBillboardDetail.getFileSeqid());
                        ppsBillboardDetailListForWFUpdate01.add(item);
                    }
                }
            } else if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(t_type)) {
                ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE01);
                ppsBillboardDetail.setCountNumber((short) 1);
                ppsBillboardDetail.setPagesNumber((short) (transom_size + t_transom_size + 1));
                ppsBillboardDetailListForInsert.add(ppsBillboardDetail);
                t_transom_size++;
            }
        }
        // 業務チェック
        if (transom_size + t_transom_size > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE01NAME, "5面"));
        }
        /**************** 【欄間看板】end ********************************/

        /**************** 【ポール看板】start ********************************/
        // 【ポール看板
        // 親情報
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPoleSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFPoleSignboardDto> commonPoleSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFPoleSignboardDto>>() {
                }.getType());
        List<PpsStoreWFPoleSignboardDto> poleSignboardDtoList = commonPoleSignboardDto.getItemsDto();
        // 紐づけ看板メインIDカンマ切れ
        if (poleSignboardDtoList != null) {
            for (PpsStoreWFPoleSignboardDto ppsDto : poleSignboardDtoList) {
                String mainId = StringUtils.isNotBlank(ppsDto.getBillboardId()) ? ppsDto.getBillboardId().split(",")[0]
                        : "";
                ppsDto.setBillboardId(mainId);
            }
        }
        List<PpsBillboardDetail> poleSignboardDetailList = gson.fromJson(JSON.toJSONString(poleSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (poleSignboardDetailList != null && poleSignboardDetailList.size() > 0) {
            int p_size = poleSignboardDetailList.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = poleSignboardDetailList.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    // 変更用看板写真LIST
                    short countNumber = 0;
                    for (PpsBillboardDetail item : poleEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            // fileSeqid
                            item.setFileSeqid(ppsDettail.getFileSeqid());
                            ppsBillboardDetailListForWFUpdate02.add(item);
                            countNumber = item.getCountNumber();
                            break;
                        }
                    }
                    for (PpsBillboardDetail item : poleEnties) {
                        if (item.getCountNumber() == countNumber) {
                            item.setBoardType(ppsDettail.getBoardType());
                            item.setTotalHeight(ppsDettail.getTotalHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    poleSignboardDetailList.remove(i);
                }
            }
        }
        short pole = poleSignboardDetailList != null ? (short) poleSignboardDetailList.size() : 0;

        // 上段
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPoleSignboardDto1.class);
        PostWFTensionDTO<PpsStoreWFPoleSignboardDto1> commonPoleSignboardDto1 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFPoleSignboardDto1>>() {
                }.getType());
        List<PpsStoreWFPoleSignboardDto1> poleSignboardDtoList1 = commonPoleSignboardDto1.getItemsDto();
        List<PpsBillboardDetail> poleSignboardDetailList1 = gson.fromJson(JSON.toJSONString(poleSignboardDtoList1),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (poleSignboardDetailList1 != null && poleSignboardDetailList1.size() > 0) {
            int p_size = poleSignboardDetailList1.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = poleSignboardDetailList1.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : poleEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    poleSignboardDetailList1.remove(i);
                }
            }
        }
        short pole1 = poleSignboardDetailList1 != null ? (short) poleSignboardDetailList1.size() : 0;

        // 下段
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPoleSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFPoleSignboardDto2> commonPoleSignboardDto2 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFPoleSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFPoleSignboardDto2> poleSignboardDtoList2 = commonPoleSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> poleSignboardDetailList2 = gson.fromJson(JSON.toJSONString(poleSignboardDtoList2),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (poleSignboardDetailList2 != null && poleSignboardDetailList2.size() > 0) {
            int p_size = poleSignboardDetailList2.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = poleSignboardDetailList2.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : poleEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    poleSignboardDetailList2.remove(i);
                }
            }
        }
        short pole2 = poleSignboardDetailList2 != null ? (short) poleSignboardDetailList2.size() : 0;
        // 比較
        short pole_t = getMax(pole, pole1, pole2);
        // 枠を作る
        for (int i = 0; i < pole_t; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < pole ? poleSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail1 = i < pole1 ? poleSignboardDetailList1.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < pole2 ? poleSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE02);
            ppsBillboardDetail.setCountNumber((short) ((pole_size / 2) + i + 1));
            // 上段
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            t1_ppsBillboardDetail.setBrand(ppsBillboardDetail1.getBrand());
            t1_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail1.getDisplayFormat());
            t1_ppsBillboardDetail.setWidth(ppsBillboardDetail1.getWidth());
            t1_ppsBillboardDetail.setHeight(ppsBillboardDetail1.getHeight());
            t1_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail1.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t1_ppsBillboardDetail);
            // 下段
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            t2_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail2.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t2_ppsBillboardDetail);
        }
        // 業務チェック
        if ((pole_size / 2) + pole_t > 2) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE02NAME, "2台"));
        }
        /**************** 【ポール看板】end ********************************/

        /**************** 【自立看板】start ********************************/
        // 【自立看板】
        // 親情報
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFStandingSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFStandingSignboardDto> commonStandingSignboardDto = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFStandingSignboardDto>>() {
                }.getType());
        List<PpsStoreWFStandingSignboardDto> standingSignboardDtoList = commonStandingSignboardDto.getItemsDto();
        // 紐づけ看板メインIDカンマ切れ
        if (standingSignboardDtoList != null) {
            for (PpsStoreWFStandingSignboardDto ppsDto : standingSignboardDtoList) {
                String mainId = StringUtils.isNotBlank(ppsDto.getBillboardId()) ? ppsDto.getBillboardId().split(",")[0]
                        : "";
                ppsDto.setBillboardId(mainId);
            }
        }
        List<PpsBillboardDetail> standingSignboardDetailList = gson
                .fromJson(JSON.toJSONString(standingSignboardDtoList), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (standingSignboardDetailList != null && standingSignboardDetailList.size() > 0) {
            int p_size = standingSignboardDetailList.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = standingSignboardDetailList.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    // 変更用看板写真LIST
                    short countNumber = 0;
                    for (PpsBillboardDetail item : standEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            // fileSeqid
                            item.setFileSeqid(ppsDettail.getFileSeqid());
                            ppsBillboardDetailListForWFUpdate03.add(item);
                            countNumber = item.getCountNumber();
                            break;
                        }
                    }
                    for (PpsBillboardDetail item : standEnties) {
                        if (item.getCountNumber() == countNumber) {
                            item.setBoardType(ppsDettail.getBoardType());
                            item.setTotalHeight(ppsDettail.getTotalHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    standingSignboardDetailList.remove(i);
                }
            }
        }
        short stand = standingSignboardDetailList != null ? (short) standingSignboardDetailList.size() : 0;
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFStandingSignboardDto1.class);
        PostWFTensionDTO<PpsStoreWFStandingSignboardDto1> commonStandingSignboardDto1 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFStandingSignboardDto1>>() {
                }.getType());
        List<PpsStoreWFStandingSignboardDto1> standingSignboardDtoList1 = commonStandingSignboardDto1.getItemsDto();
        List<PpsBillboardDetail> standingSignboardDetailList1 = gson
                .fromJson(JSON.toJSONString(standingSignboardDtoList1), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (standingSignboardDetailList1 != null && standingSignboardDetailList1.size() > 0) {
            int p_size = standingSignboardDetailList1.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = standingSignboardDetailList1.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : standEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    standingSignboardDetailList1.remove(i);
                }
            }
        }
        short stand1 = standingSignboardDetailList1 != null ? (short) standingSignboardDetailList1.size() : 0;

        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFStandingSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFStandingSignboardDto2> commonStandingSignboardDto2 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFStandingSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFStandingSignboardDto2> standingSignboardDtoList2 = commonStandingSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> standingSignboardDetailList2 = gson
                .fromJson(JSON.toJSONString(standingSignboardDtoList2), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (standingSignboardDetailList2 != null && standingSignboardDetailList2.size() > 0) {
            int p_size = standingSignboardDetailList2.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = standingSignboardDetailList2.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : standEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    standingSignboardDetailList2.remove(i);
                }
            }
        }
        short stand2 = standingSignboardDetailList2 != null ? (short) standingSignboardDetailList2.size() : 0;

        // 比較
        short stand_t = getMax(stand, stand1, stand2);
        // 枠を作る
        for (int i = 0; i < stand_t; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < stand ? standingSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail1 = i < stand1 ? standingSignboardDetailList1.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < stand2 ? standingSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE03);
            ppsBillboardDetail.setCountNumber((short) ((stand_size / 2) + i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            t1_ppsBillboardDetail.setBrand(ppsBillboardDetail1.getBrand());
            t1_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail1.getDisplayFormat());
            t1_ppsBillboardDetail.setWidth(ppsBillboardDetail1.getWidth());
            t1_ppsBillboardDetail.setHeight(ppsBillboardDetail1.getHeight());
            t1_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail1.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            t2_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail2.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t2_ppsBillboardDetail);
        }
        // 業務チェック
        if ((stand_size / 2) + stand_t > 2) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE03NAME, "2台"));
        }
        /**************** 【自立看板】end ********************************/

        /**************** 【塔屋看板】start ********************************/
        // 【塔屋看板】
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFPenthouseSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFPenthouseSignboardDto> commonPenthouseSignboardDto = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFPenthouseSignboardDto>>() {
                }.getType());
        List<PpsStoreWFPenthouseSignboardDto> penthouseSignboardDtoList = commonPenthouseSignboardDto.getItemsDto();
        List<PpsBillboardDetail> penthouseSignboardDetailList = gson
                .fromJson(JSON.toJSONString(penthouseSignboardDtoList), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short penthouse_count = penthouseSignboardDetailList != null ? (short) penthouseSignboardDetailList.size() : 0;
        short t_penthouse_size = 0;
        for (int i = 0; i < penthouse_count; i++) {
            PpsBillboardDetail ppsBillboardDetail = penthouseSignboardDetailList.get(i);
            String t_type = ppsBillboardDetail.getImplementationType();
            if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(t_type)) {
                // 変更用看板写真LIST
                for (PpsBillboardDetail item : penthouseEnties) {
                    if (item.getBillboardId().equals(ppsBillboardDetail.getBillboardId())) {
                        item.setBoardType(ppsBillboardDetail.getBoardType());
                        item.setTotalHeight(ppsBillboardDetail.getTotalHeight());
                        item.setBrand(ppsBillboardDetail.getBrand());
                        item.setDisplayFormat(ppsBillboardDetail.getDisplayFormat());
                        item.setWidth(ppsBillboardDetail.getWidth());
                        item.setHeight(ppsBillboardDetail.getHeight());
                        item.setInstallationLocation(ppsBillboardDetail.getInstallationLocation());
                        // fileSeqid
                        item.setFileSeqid(ppsBillboardDetail.getFileSeqid());
                        ppsBillboardDetailListForWFUpdate05.add(item);
                    }
                }
            } else if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(t_type)) {
                ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE05);
                ppsBillboardDetail.setCountNumber((short) 1);
                ppsBillboardDetail.setPagesNumber((short) (penthouse_size + t_penthouse_size + 1));
                ppsBillboardDetailListForInsert.add(ppsBillboardDetail);
                t_penthouse_size++;
            }
        }
        // 業務チェック
        if (penthouse_size + t_penthouse_size > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE05NAME, "5面"));
        }
        /**************** 【塔屋看板】end ********************************/

        /**************** 【袖看板】start ********************************/
        // 【袖看板】
        // 親情報
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto> commonSideSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto> sideSignboardDtoList = commonSideSignboardDto.getItemsDto();
        // 紐づけ看板メインIDカンマ切れ
        if (sideSignboardDtoList != null) {
            for (PpsStoreWFSideSignboardDto ppsDto : sideSignboardDtoList) {
                String mainId = StringUtils.isNotBlank(ppsDto.getBillboardId()) ? ppsDto.getBillboardId().split(",")[0]
                        : "";
                ppsDto.setBillboardId(mainId);
            }
        }
        List<PpsBillboardDetail> sideSignboardDetailList = gson.fromJson(JSON.toJSONString(sideSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (sideSignboardDetailList != null && sideSignboardDetailList.size() > 0) {
            int p_size = sideSignboardDetailList.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = sideSignboardDetailList.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    // 変更用看板写真LIST
                    short countNumber = 0;
                    for (PpsBillboardDetail item : sideEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            // fileSeqid
                            item.setFileSeqid(ppsDettail.getFileSeqid());
                            ppsBillboardDetailListForWFUpdate06.add(item);
                            countNumber = item.getCountNumber();
                            break;
                        }
                    }
                    for (PpsBillboardDetail item : sideEnties) {
                        if (item.getCountNumber() == countNumber) {
                            item.setBoardType(ppsDettail.getBoardType());
                            item.setTotalHeight(ppsDettail.getTotalHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    sideSignboardDetailList.remove(i);
                }
            }
        }
        short side = sideSignboardDetailList != null ? (short) sideSignboardDetailList.size() : 0;
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto1.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto1> commonSideSignboardDto1 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto1>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto1> sideSignboardDtoList1 = commonSideSignboardDto1.getItemsDto();
        List<PpsBillboardDetail> sideSignboardDetailList1 = gson.fromJson(JSON.toJSONString(sideSignboardDtoList1),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (sideSignboardDetailList1 != null && sideSignboardDetailList1.size() > 0) {
            int p_size = sideSignboardDetailList1.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = sideSignboardDetailList1.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : sideEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    sideSignboardDetailList1.remove(i);
                }
            }
        }
        short side1 = sideSignboardDetailList1 != null ? (short) sideSignboardDetailList1.size() : 0;
        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto2> commonSideSignboardDto2 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto2> sideSignboardDtoList2 = commonSideSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> sideSignboardDetailList2 = gson.fromJson(JSON.toJSONString(sideSignboardDtoList2),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (sideSignboardDetailList2 != null && sideSignboardDetailList2.size() > 0) {
            int p_size = sideSignboardDetailList2.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = sideSignboardDetailList2.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : sideEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    sideSignboardDetailList2.remove(i);
                }
            }
        }
        short side2 = sideSignboardDetailList2 != null ? (short) sideSignboardDetailList2.size() : 0;

        // 盤面③
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFSideSignboardDto3.class);
        PostWFTensionDTO<PpsStoreWFSideSignboardDto3> commonSideSignboardDto3 = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFSideSignboardDto3>>() {
                }.getType());
        List<PpsStoreWFSideSignboardDto3> sideSignboardDtoList3 = commonSideSignboardDto3.getItemsDto();
        List<PpsBillboardDetail> sideSignboardDetailList3 = gson.fromJson(JSON.toJSONString(sideSignboardDtoList3),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (sideSignboardDetailList3 != null && sideSignboardDetailList3.size() > 0) {
            int p_size = sideSignboardDetailList3.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = sideSignboardDetailList3.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : sideEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    sideSignboardDetailList3.remove(i);
                }
            }
        }
        short side3 = sideSignboardDetailList3 != null ? (short) sideSignboardDetailList3.size() : 0;

        // 比較
        short side_t = getMax(side, side1, side2, side3);
        // 枠を作る
        for (int i = 0; i < side_t; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < side ? sideSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail1 = i < side1 ? sideSignboardDetailList1.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < side2 ? sideSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail3 = i < side3 ? sideSignboardDetailList3.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE06);
            ppsBillboardDetail.setCountNumber((short) ((side_size / 3) + i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            t1_ppsBillboardDetail.setBrand(ppsBillboardDetail1.getBrand());
            t1_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail1.getDisplayFormat());
            t1_ppsBillboardDetail.setWidth(ppsBillboardDetail1.getWidth());
            t1_ppsBillboardDetail.setHeight(ppsBillboardDetail1.getHeight());
            t1_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail1.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            t2_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail2.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t2_ppsBillboardDetail);
            // 盤面③
            PpsBillboardDetail t3_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t3_ppsBillboardDetail);
            t3_ppsBillboardDetail.setPagesNumber((short) 3);
            t3_ppsBillboardDetail.setBrand(ppsBillboardDetail3.getBrand());
            t3_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail3.getDisplayFormat());
            t3_ppsBillboardDetail.setWidth(ppsBillboardDetail3.getWidth());
            t3_ppsBillboardDetail.setHeight(ppsBillboardDetail3.getHeight());
            t3_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail3.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t3_ppsBillboardDetail);
        }
        // 業務チェック
        if ((side_size / 3) + side_t > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE06NAME, "5台"));
        }
        /**************** 【袖看板】end ********************************/

        /**************** 【壁面看板】start ********************************/
        // 【壁面看板】
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFWallSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFWallSignboardDto> commonWallSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFWallSignboardDto>>() {
                }.getType());
        List<PpsStoreWFWallSignboardDto> wallSignboardDtoList = commonWallSignboardDto.getItemsDto();
        List<PpsBillboardDetail> wallSignboardDetailList = gson.fromJson(JSON.toJSONString(wallSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        short wall_count = wallSignboardDetailList != null ? (short) wallSignboardDetailList.size() : 0;
        short t_wall_size = 0;
        for (int i = 0; i < wall_count; i++) {
            PpsBillboardDetail ppsBillboardDetail = wallSignboardDetailList.get(i);
            String t_type = ppsBillboardDetail.getImplementationType();
            if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(t_type)) {
                // 変更用看板写真LIST
                for (PpsBillboardDetail item : wallEnties) {
                    if (item.getBillboardId().equals(ppsBillboardDetail.getBillboardId())) {
                        item.setBoardType(ppsBillboardDetail.getBoardType());
                        item.setTotalHeight(ppsBillboardDetail.getTotalHeight());
                        item.setBrand(ppsBillboardDetail.getBrand());
                        item.setDisplayFormat(ppsBillboardDetail.getDisplayFormat());
                        item.setWidth(ppsBillboardDetail.getWidth());
                        item.setHeight(ppsBillboardDetail.getHeight());
                        item.setInstallationLocation(ppsBillboardDetail.getInstallationLocation());
                        // fileSeqid
                        item.setFileSeqid(ppsBillboardDetail.getFileSeqid());
                        ppsBillboardDetailListForWFUpdate04.add(item);
                    }
                }
            } else if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(t_type)) {
                ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE04);
                ppsBillboardDetail.setCountNumber((short) 1);
                ppsBillboardDetail.setPagesNumber((short) (wall_size + t_wall_size + 1));
                ppsBillboardDetailListForInsert.add(ppsBillboardDetail);
                t_wall_size++;
            }
        }
        // 業務チェック
        if (t_wall_size + wall_size > 5) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE04NAME, "5面"));
        }
        /**************** 【壁面看板】end ********************************/

        /**************** 【駐車場看板】start ********************************/
        // 【駐車場看板】
        // 親情報
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFParkingSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFParkingSignboardDto> commonParkingSignboardDto = gson.fromJson(commonBillboardDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFParkingSignboardDto>>() {
                }.getType());
        List<PpsStoreWFParkingSignboardDto> parkingSignboardDtoList = commonParkingSignboardDto.getItemsDto();
        // 紐づけ看板メインIDカンマ切れ
        if (parkingSignboardDtoList != null) {
            for (PpsStoreWFParkingSignboardDto ppsDto : parkingSignboardDtoList) {
                String mainId = StringUtils.isNotBlank(ppsDto.getBillboardId()) ? ppsDto.getBillboardId().split(",")[0]
                        : "";
                ppsDto.setBillboardId(mainId);
            }
        }
        List<PpsBillboardDetail> parkingSignboardDetailList = gson.fromJson(JSON.toJSONString(parkingSignboardDtoList),
                new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (parkingSignboardDetailList != null && parkingSignboardDetailList.size() > 0) {
            int p_size = parkingSignboardDetailList.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = parkingSignboardDetailList.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    // 変更用看板写真LIST
                    short countNumber = 0;
                    for (PpsBillboardDetail item : parkingEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            // fileSeqid
                            item.setFileSeqid(ppsDettail.getFileSeqid());
                            ppsBillboardDetailListForWFUpdate07.add(item);
                            countNumber = item.getCountNumber();
                            break;
                        }
                    }
                    for (PpsBillboardDetail item : parkingEnties) {
                        if (item.getCountNumber() == countNumber) {
                            item.setBoardType(ppsDettail.getBoardType());
                            item.setTotalHeight(ppsDettail.getTotalHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    parkingSignboardDetailList.remove(i);
                }
            }
        }
        short parking = parkingSignboardDetailList != null ? (short) parkingSignboardDetailList.size() : 0;
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFParkingSignboardDto1.class);
        PostWFTensionDTO<PpsStoreWFParkingSignboardDto1> commonParkingSignboardDto1 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFParkingSignboardDto1>>() {
                }.getType());
        List<PpsStoreWFParkingSignboardDto1> parkingSignboardDtoList1 = commonParkingSignboardDto1.getItemsDto();
        List<PpsBillboardDetail> parkingSignboardDetailList1 = gson
                .fromJson(JSON.toJSONString(parkingSignboardDtoList1), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (parkingSignboardDetailList1 != null && parkingSignboardDetailList1.size() > 0) {
            int p_size = parkingSignboardDetailList1.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = parkingSignboardDetailList1.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : parkingEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    parkingSignboardDetailList1.remove(i);
                }
            }
        }
        short parking1 = parkingSignboardDetailList1 != null ? (short) parkingSignboardDetailList1.size() : 0;

        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFParkingSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFParkingSignboardDto2> commonParkingSignboardDto2 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFParkingSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFParkingSignboardDto2> parkingSignboardDtoList2 = commonParkingSignboardDto2.getItemsDto();
        List<PpsBillboardDetail> parkingSignboardDetailList2 = gson
                .fromJson(JSON.toJSONString(parkingSignboardDtoList2), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (parkingSignboardDetailList2 != null && parkingSignboardDetailList2.size() > 0) {
            int p_size = parkingSignboardDetailList2.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = parkingSignboardDetailList2.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : parkingEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    parkingSignboardDetailList2.remove(i);
                }
            }
        }
        short parking2 = parkingSignboardDetailList2 != null ? (short) parkingSignboardDetailList2.size() : 0;

        // 比較
        short parking_t = getMax(parking, parking1, parking2);
        // 枠を作る
        for (int i = 0; i < parking_t; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < parking ? parkingSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail1 = i < parking1 ? parkingSignboardDetailList1.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < parking2 ? parkingSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE07);
            ppsBillboardDetail.setCountNumber((short) ((parking_size / 2) + i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            t1_ppsBillboardDetail.setBrand(ppsBillboardDetail1.getBrand());
            t1_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail1.getDisplayFormat());
            t1_ppsBillboardDetail.setWidth(ppsBillboardDetail1.getWidth());
            t1_ppsBillboardDetail.setHeight(ppsBillboardDetail1.getHeight());
            t1_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail1.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            t2_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail2.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t2_ppsBillboardDetail);
        }
        // 業務チェック
        if ((parking_size / 2) + parking_t > 7) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE07NAME, "7台"));
        }
        /**************** 【駐車場看板】end ********************************/

        /**************** 【集合看板】start ********************************/
        // 【集合看板】
        // 親情報
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFCollectiveSignboardDto.class);
        PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto> commonCollectiveSignboardDto = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto>>() {
                }.getType());
        List<PpsStoreWFCollectiveSignboardDto> collectiveSignboardDtoList = commonCollectiveSignboardDto.getItemsDto();
        // 紐づけ看板メインIDカンマ切れ
        if (collectiveSignboardDtoList != null) {
            for (PpsStoreWFCollectiveSignboardDto ppsDto : collectiveSignboardDtoList) {
                String mainId = StringUtils.isNotBlank(ppsDto.getBillboardId()) ? ppsDto.getBillboardId().split(",")[0]
                        : "";
                ppsDto.setBillboardId(mainId);
            }
        }
        List<PpsBillboardDetail> collectiveSignboardDetailList = gson
                .fromJson(JSON.toJSONString(collectiveSignboardDtoList), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (collectiveSignboardDetailList != null && collectiveSignboardDetailList.size() > 0) {
            int p_size = collectiveSignboardDetailList.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = collectiveSignboardDetailList.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    // 変更用看板写真LIST
                    short countNumber = 0;
                    for (PpsBillboardDetail item : collectiveEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            // fileSeqid
                            item.setFileSeqid(ppsDettail.getFileSeqid());
                            ppsBillboardDetailListForWFUpdate08.add(item);
                            countNumber = item.getCountNumber();
                            break;
                        }
                    }
                    for (PpsBillboardDetail item : collectiveEnties) {
                        if (item.getCountNumber() == countNumber) {
                            item.setBoardType(ppsDettail.getBoardType());
                            item.setTotalHeight(ppsDettail.getTotalHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    collectiveSignboardDetailList.remove(i);
                }
            }
        }
        short collective = collectiveSignboardDetailList != null ? (short) collectiveSignboardDetailList.size() : 0;
        // 盤面①
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFCollectiveSignboardDto1.class);
        PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto1> commonCollectiveSignboardDto1 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto1>>() {
                }.getType());
        List<PpsStoreWFCollectiveSignboardDto1> collectiveSignboardDtoList1 = commonCollectiveSignboardDto1
                .getItemsDto();
        List<PpsBillboardDetail> collectiveSignboardDetailList1 = gson
                .fromJson(JSON.toJSONString(collectiveSignboardDtoList1), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (collectiveSignboardDetailList1 != null && collectiveSignboardDetailList1.size() > 0) {
            int p_size = collectiveSignboardDetailList1.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = collectiveSignboardDetailList1.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : collectiveEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    collectiveSignboardDetailList1.remove(i);
                }
            }
        }
        short collective1 = collectiveSignboardDetailList1 != null ? (short) collectiveSignboardDetailList1.size() : 0;

        // 盤面②
        commonBillboardDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFCollectiveSignboardDto2.class);
        PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto2> commonCollectiveSignboardDto2 = gson
                .fromJson(commonBillboardDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFCollectiveSignboardDto2>>() {
                }.getType());
        List<PpsStoreWFCollectiveSignboardDto2> collectiveSignboardDtoList2 = commonCollectiveSignboardDto2
                .getItemsDto();
        List<PpsBillboardDetail> collectiveSignboardDetailList2 = gson
                .fromJson(JSON.toJSONString(collectiveSignboardDtoList2), new TypeToken<List<PpsBillboardDetail>>() {
                }.getType());
        // 変更の部分を外す
        if (collectiveSignboardDetailList2 != null && collectiveSignboardDetailList2.size() > 0) {
            int p_size = collectiveSignboardDetailList2.size();
            for (int i = p_size - 1; i >= 0; i--) {
                PpsBillboardDetail ppsDettail = collectiveSignboardDetailList2.get(i);
                if (PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE02NAME.equals(ppsDettail.getImplementationType())) {
                    for (PpsBillboardDetail item : collectiveEnties) {
                        if (item.getBillboardId().equals(ppsDettail.getBillboardId())) {
                            item.setBrand(ppsDettail.getBrand());
                            item.setDisplayFormat(ppsDettail.getDisplayFormat());
                            item.setWidth(ppsDettail.getWidth());
                            item.setHeight(ppsDettail.getHeight());
                        }
                    }
                }
                if (!PpsConst.IMPLEMENTATIONTYPE.IMPLEMENTATIONTYPE01NAME.equals(ppsDettail.getImplementationType())) {
                    collectiveSignboardDetailList2.remove(i);
                }
            }
        }
        short collective2 = collectiveSignboardDetailList2 != null ? (short) collectiveSignboardDetailList2.size() : 0;

        // 比較
        short collective_t = getMax(collective, collective1, collective2);
        // 枠を作る
        for (int i = 0; i < collective_t; i++) {
            PpsBillboardDetail ppsBillboardDetail = i < collective ? collectiveSignboardDetailList.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail1 = i < collective1 ? collectiveSignboardDetailList1.get(i)
                    : new PpsBillboardDetail();
            PpsBillboardDetail ppsBillboardDetail2 = i < collective2 ? collectiveSignboardDetailList2.get(i)
                    : new PpsBillboardDetail();
            ppsBillboardDetail.setBillboardType(PpsConst.BILLBOARDTYPE.BILLBOARDTYPE08);
            ppsBillboardDetail.setCountNumber((short) ((collective_size / 2) + i + 1));
            // 盤面①
            PpsBillboardDetail t1_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t1_ppsBillboardDetail);
            t1_ppsBillboardDetail.setPagesNumber((short) 1);
            t1_ppsBillboardDetail.setBrand(ppsBillboardDetail1.getBrand());
            t1_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail1.getDisplayFormat());
            t1_ppsBillboardDetail.setWidth(ppsBillboardDetail1.getWidth());
            t1_ppsBillboardDetail.setHeight(ppsBillboardDetail1.getHeight());
            t1_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail1.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t1_ppsBillboardDetail);
            // 盤面②
            PpsBillboardDetail t2_ppsBillboardDetail = new PpsBillboardDetail();
            // Bean Copy
            BeanUtils.copyProperties(ppsBillboardDetail, t2_ppsBillboardDetail);
            t2_ppsBillboardDetail.setPagesNumber((short) 2);
            t2_ppsBillboardDetail.setBrand(ppsBillboardDetail2.getBrand());
            t2_ppsBillboardDetail.setDisplayFormat(ppsBillboardDetail2.getDisplayFormat());
            t2_ppsBillboardDetail.setWidth(ppsBillboardDetail2.getWidth());
            t2_ppsBillboardDetail.setHeight(ppsBillboardDetail2.getHeight());
            t2_ppsBillboardDetail.setApplyingDecision(ppsBillboardDetail2.getApplyingDecision());
            ppsBillboardDetailListForInsert.add(t2_ppsBillboardDetail);
        }
        // 業務チェック
        if ((collective_size / 2) + collective_t > 3) {
            appItemErrMsg.append(
                    PpsMessages.getMessage(PpsMessages.MSG031, PpsConst.BILLBOARDTYPE.BILLBOARDTYPE08NAME, "3台"));
        }
        /**************** 【集合看板】end ********************************/

        // 業務チェック
        String msg = appItemErrMsg.toString();
        if (StringUtils.isNotEmpty(msg)) {
            if (msg.indexOf("\r\n") == 0) {
                msg = msg.substring(2);
            }
            throw new PPEBusinessErrorException(msg);
        }

        // リストを結合する
//        ppsBillboardDetailListForUpdate = concatenate(transomEnties,poleEnties,standEnties,penthouseEnties,sideEnties,wallEnties,parkingEnties,collectiveEnties);
        ppsBillboardDetailListForUpdate.addAll(transomEnties);
        ppsBillboardDetailListForUpdate.addAll(poleEnties);
        ppsBillboardDetailListForUpdate.addAll(standEnties);
        ppsBillboardDetailListForUpdate.addAll(penthouseEnties);
        ppsBillboardDetailListForUpdate.addAll(sideEnties);
        ppsBillboardDetailListForUpdate.addAll(wallEnties);
        ppsBillboardDetailListForUpdate.addAll(parkingEnties);
        ppsBillboardDetailListForUpdate.addAll(collectiveEnties);

    }

    /**
     * 看板管理DB情報設置
     * 
     * @param p_jsonStr
     * @param ppsWfFixtureRegistrationDetailList
     */
    private void setFixtureRegistrationDetailInfo(String p_jsonStr,
            List<PpsWfFixtureRegistrationDetail> ppsWfFixtureRegistrationDetailList) {
        // 什器
        String fixtureDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFFixtureDetailDto.class);
        PostWFTensionDTO<PpsStoreWFFixtureDetailDto> commonFixtureDto = gson.fromJson(fixtureDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFFixtureDetailDto>>() {
                }.getType());
        List<PpsStoreWFFixtureDetailDto> fixtureDtoList = commonFixtureDto.getItemsDto();
        List<PpsWfFixtureRegistrationDetail> fixtureDetailList = gson.fromJson(JSON.toJSONString(fixtureDtoList),
                new TypeToken<List<PpsWfFixtureRegistrationDetail>>() {
                }.getType());

        for (PpsWfFixtureRegistrationDetail ppsWfFixtureRegistrationDetail : fixtureDetailList) {
            ppsWfFixtureRegistrationDetail.setOrderType(PpsConst.MANUFACTURERTYPE.MANUFACTURERTYPE01);
            ppsWfFixtureRegistrationDetailList.add(ppsWfFixtureRegistrationDetail);
        }

        // オリバー
        String chairDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFFixtureChairDetailDto.class);
        PostWFTensionDTO<PpsStoreWFFixtureChairDetailDto> commonChairDto = gson.fromJson(chairDtoStr,
                new TypeToken<PostWFTensionDTO<PpsStoreWFFixtureChairDetailDto>>() {
                }.getType());
        List<PpsStoreWFFixtureChairDetailDto> chairDtoList = commonChairDto.getItemsDto();
        List<PpsWfFixtureRegistrationDetail> chairDetailList = gson.fromJson(JSON.toJSONString(chairDtoList),
                new TypeToken<List<PpsWfFixtureRegistrationDetail>>() {
                }.getType());

        for (PpsWfFixtureRegistrationDetail ppsWfFixtureRegistrationDetail : chairDetailList) {
            ppsWfFixtureRegistrationDetail.setOrderType(PpsConst.MANUFACTURERTYPE.MANUFACTURERTYPE02);
            ppsWfFixtureRegistrationDetailList.add(ppsWfFixtureRegistrationDetail);
        }

        // 個別発注什器
        String fixtureIndividualDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFFixtureIndividualDetailDto.class);
        PostWFTensionDTO<PpsStoreWFFixtureIndividualDetailDto> commonFixtureIndividualDto = gson.fromJson(
                fixtureIndividualDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFFixtureIndividualDetailDto>>() {
                }.getType());
        List<PpsStoreWFFixtureIndividualDetailDto> fixtureIndividualDtoList = commonFixtureIndividualDto.getItemsDto();
        List<PpsWfFixtureRegistrationDetail> fixtureIndividualDetailList = gson.fromJson(
                JSON.toJSONString(fixtureIndividualDtoList), new TypeToken<List<PpsWfFixtureRegistrationDetail>>() {
                }.getType());

        for (PpsWfFixtureRegistrationDetail ppsWfFixtureRegistrationDetail : fixtureIndividualDetailList) {
            ppsWfFixtureRegistrationDetail.setOrderType(PpsConst.MANUFACTURERTYPE.MANUFACTURERTYPE03);
            ppsWfFixtureRegistrationDetailList.add(ppsWfFixtureRegistrationDetail);
        }

        // 個別発注オリバー
        String chairIndividualDtoStr = CommonJsonCovert.toObj(p_jsonStr, PpsStoreWFChairIndividualDetailDto.class);
        PostWFTensionDTO<PpsStoreWFChairIndividualDetailDto> commonChairIndividualDto = gson
                .fromJson(chairIndividualDtoStr, new TypeToken<PostWFTensionDTO<PpsStoreWFChairIndividualDetailDto>>() {
                }.getType());
        List<PpsStoreWFChairIndividualDetailDto> chairIndividualDtoList = commonChairIndividualDto.getItemsDto();
        List<PpsWfFixtureRegistrationDetail> chairIndividualDetailList = gson.fromJson(
                JSON.toJSONString(chairIndividualDtoList), new TypeToken<List<PpsWfFixtureRegistrationDetail>>() {
                }.getType());

        for (PpsWfFixtureRegistrationDetail ppsWfFixtureRegistrationDetail : chairIndividualDetailList) {
            ppsWfFixtureRegistrationDetail.setOrderType(PpsConst.MANUFACTURERTYPE.MANUFACTURERTYPE04);
            ppsWfFixtureRegistrationDetailList.add(ppsWfFixtureRegistrationDetail);
        }
    }

    /**
     * 複数の非同期処理
     * 
     * @param ppsShopAttFileManageList
     */
    public void multipleAsync(List<PpsShopAttFileManage> ppsShopAttFileManageList,
            List<PpsGovernmentAttfile> ppsGovernmentAttfileList) {
        // 非同期複数スレッド
        ThreadPoolExecutor threadExecutor = new ThreadPoolExecutor(4, 8, 1L, TimeUnit.SECONDS,
                new ArrayBlockingQueue<Runnable>(100), new ThreadPoolExecutor.CallerRunsPolicy());
        // GR0003
        final String ppcGroupid = envConfig.getXPpsShopGroupid();
        final String commonServerIp = envConfig.getCommonServerIp();
        final String commonFileDownload = envConfig.getCommonFileDownload();
        final String apServerPath = envConfig.getApServerPath();
        final String wfStoreFileDirectory = envConfig.getWfStoreFileDirectory();
        final String storeFurniturePhotoUpload = envConfig.getStoreFurniturePhotoUpload();
        final String envCd = envConfig.getEnvCd();
        final String ppcAuth = envConfig.getXPpcAuth();
        final List<ServerInfoDto> apServer = envConfig.getApServer();
        for (int i = 0; i < ppsShopAttFileManageList.size(); i++) {
            final int index = i;
            threadExecutor.execute(new Runnable() {
                @Override
                public void run() {
                    try {
                        PpsShopAttFileManage t_ppsShopAttFileManage = ppsShopAttFileManageList.get(index);
                        // fileSeqid
                        String fileSeqid = t_ppsShopAttFileManage.getFileSeqid();
                        // 共通からファイル情報ダウンロード
                        String filePath = CommonAPIUtil.commonServer(t_ppsShopAttFileManage.getFileSeqid(),
                                t_ppsShopAttFileManage.getFileName(), ppcGroupid, commonServerIp, commonFileDownload,
                                apServerPath, storeFurniturePhotoUpload, wfStoreFileDirectory, envCd, apServer,
                                ppcAuth);
                        t_ppsShopAttFileManage.setFilePash(filePath);
                        // update
                        ppsShopAttFileManageMapper.updateByFileSeqId(t_ppsShopAttFileManage);
                        // 諸官庁ファイル
                        if (ppsGovernmentAttfileList != null) {
                            for (PpsGovernmentAttfile ppsGovernmentAttfile : ppsGovernmentAttfileList) {
                                if (StringUtils.isNotBlank(fileSeqid)
                                        && fileSeqid.equals(ppsGovernmentAttfile.getFileSeqid())) {
                                    ppsGovernmentAttfile.setFilePash(filePath);
                                    // update
                                    ppsGovernmentAttfileMapper.updateByFileSeqId(ppsGovernmentAttfile);
                                }
                            }
                        }
                    } catch (Exception e) {
                        // スキップする
                    }
                }
            });

        }
        threadExecutor.shutdown();
    }

    private void billboardImport(List<PpsWfSignboardInspectionHistory> ppsWfbillboardCheckList, String decisionType,
            String taskStatus, String execWfId, String wfId) throws Exception {
        if (ppsWfbillboardCheckList != null && ppsWfbillboardCheckList.size() > 0) {
            String shopCd = ppsWfbillboardCheckList.get(0).getShopClassificationCode();
            PpsWfSignboardInspectionHistory history = ppsWfbillboardCheckList.get(0);

            // 最大バージョン取得
            PpsWfSignboardInspectionHistoryKey ppsWfSignboardInspectionHistoryKey = new PpsWfSignboardInspectionHistoryKey();
            ppsWfSignboardInspectionHistoryKey.setShopClassificationCode(shopCd);
            int maxVersion = ppsWfSignboardInspectionHistoryMapper.selectMaxVersion(ppsWfSignboardInspectionHistoryKey);

            // 操作データが設定
            history.setShopClassificationCode(shopCd);
            history.setWfId(wfId);
            history.setExecWfId(execWfId);
            // バージョン
            history.setVersion(new Long(maxVersion));
            // タスクステータス
            history.setTaskStatus(taskStatus);
            // 点検実施報告対象:「0:対象 1:対象外」
            if (StringUtils.isNotBlank(history.getInspectionObject())) {
                if (StringUtils.equals(PpsConst.CLEANLINESSSTATUS.INSPECTIONOBJECTSTR_0,
                        history.getInspectionObject())) {
                    history.setInspectionObject(PpsConst.CLEANLINESSSTATUS.INSPECTIONOBJECT_0);
                } else if (StringUtils.equals(PpsConst.CLEANLINESSSTATUS.INSPECTIONOBJECTSTR_1,
                        history.getInspectionObject())) {
                    history.setInspectionObject(PpsConst.CLEANLINESSSTATUS.INSPECTIONOBJECT_1);
                }
            }
            history.setIsDeleted(false);
            history.setUpdatedUserId(USERID);
            history.setUpdatedFuncId(FUNCID);
            history.setUpdatedAt(LocalDateTime.now());
            history.setCreatedUserId(USERID);
            history.setCreatedFuncId(FUNCID);
            history.setCreatedAt(LocalDateTime.now());

            // 初期化処理
            ppsWfSignboardInspectionHistoryMapper.updateInspectionHistoryInfoForIsdeleted(history);

            // WF看板点検履歴テーブル挿入、最初取り込み
            ppsWfSignboardInspectionHistoryMapper.insertSelective(history);

            if (PpsConst.DECISIONTYPE.DECISIONTYPE01.equals(decisionType)) {
                // 排他チェック
                int countCheck = ppsBillboardManageMapper.selectPpsBillboardManageByCount(shopCd);
                if (countCheck > 0) {
                    throw new PPEBusinessErrorException(PpsMessages.getMessage(PpsMessages.MSG053, shopCd));
                }
                // 看板管理テーブルのステータス変更
                PpsBillboardManage record = new PpsBillboardManage();
                record.setShopClassificationCode(shopCd);
                // 点検ステータス
                record.setInspectionStatus(PpsConst.INSPECTION.STATUS_02);
                record.setIsDeleted(false);
                record.setUpdatedUserId(USERID);
                record.setUpdatedFuncId(FUNCID);
                record.setUpdatedAt(LocalDateTime.now());
                int countForOpreation = ppsBillboardManageMapper.ppsSelectManageCountByShopClassificationCode(record);
                if (countForOpreation > 0) {
                    // 更新
                    ppsBillboardManageMapper.updateByPrimaryKeySelective(record);
                } else {
                    // 挿入
                    record.setCreatedAt(LocalDateTime.now());
                    record.setCreatedFuncId(FUNCID);
                    record.setCreatedUserId(USERID);
                    ppsBillboardManageMapper.insert(record);
                }

                // 看板点検基本情報テーブルインサート
                PpsWfSignboardInspectionDetailKey ppsWfSignboardInspectionDetailKey = new PpsWfSignboardInspectionDetailKey();
                ppsWfSignboardInspectionDetailKey.setShopClassificationCode(shopCd);
                ppsWfSignboardInspectionDetailKey.setExecWfId(execWfId);
                int countForBascInfo = ppsWfSignboardInspectionBascMapper
                        .selectCountForWfImport(ppsWfSignboardInspectionDetailKey);
                if (countForBascInfo == 0) {
                    PpsWfSignboardInspectionBasc inspectionBasc = new PpsWfSignboardInspectionBasc();
                    // ｼｮｯﾌﾟ分類ｺｰﾄﾞ
                    inspectionBasc.setShopClassificationCode(shopCd);
                    // WF実行ID
                    inspectionBasc.setExecWfId(execWfId);
                    // WFID
                    inspectionBasc.setWfId(wfId);
                    // 次回点検日
                    inspectionBasc.setNextInspectionDate(history.getNextInspectionDate());
                    // 点検実施報告対象
                    inspectionBasc.setInspectionTarget(history.getInspectionObject());
                    // 申請日
                    inspectionBasc.setApplicationDate(history.getInspectionAppDate());
                    inspectionBasc.setIsDeleted(false);
                    inspectionBasc.setUpdatedUserId(USERID);
                    inspectionBasc.setUpdatedFuncId(FUNCID);
                    inspectionBasc.setUpdatedAt(LocalDateTime.now());
                    inspectionBasc.setCreatedAt(LocalDateTime.now());
                    inspectionBasc.setCreatedFuncId(FUNCID);
                    inspectionBasc.setCreatedUserId(USERID);
                    ppsWfSignboardInspectionBascMapper.insertSelective(inspectionBasc);
                }

                // 完了
            } else if (PpsConst.DECISIONTYPE.DECISIONTYPE03.equals(decisionType)) {
                // 看板管理テーブルを更新
                PpsBillboardManage ppsBillboardManage = new PpsBillboardManage();
                // 店舗名
                ppsBillboardManage.setAgencyStoreName(history.getAgencyStoreName());
                // 運営店名
                ppsBillboardManage.setOperatingStoreName(history.getOperatingStoreName());
                // 運営店コード
                ppsBillboardManage.setOperatingStoreCode(history.getOperatingStoreCode());
                // 電話番号
                ppsBillboardManage.setApplicantMail(history.getApplicantMail());
                // 担当者名
                ppsBillboardManage.setResponsibleName(history.getAgencyPersonName());
                // ショップ分類コード
                ppsBillboardManage.setShopClassificationCode(shopCd);
                // 取次店コード
                ppsBillboardManage.setAgencyStoreCode(history.getAgencyStoreCode());
                // 申請者名
                ppsBillboardManage.setApplicantName(history.getApplicantName());
                // 申請者メールアドレス
                ppsBillboardManage.setApplicantMail(history.getApplicantMail());
                // 電話番号
                ppsBillboardManage.setApplicantTel(history.getApplicantTel());
                // 担当者メールアドレス
                ppsBillboardManage.setResponsibleMail(history.getAgencyMail());
                // 担当者電話番号
                ppsBillboardManage.setResponsibleTel(history.getAgencyTel());
                // 次回点検日
                ppsBillboardManage.setNextInspectionDate(history.getNextInspectionDate());
                // 点検申請日
                ppsBillboardManage.setInspectionAppDate(history.getInspectionAppDate());
                // 点検ステータス
                ppsBillboardManage.setInspectionStatus(PpsConst.INSPECTION.STATUS_03);
                // 点検実施報告対象
                ppsBillboardManage.setInspectionObject(history.getInspectionObject());
                ppsBillboardManage.setIsDeleted(false);
                ppsBillboardManage.setUpdatedUserId(USERID);
                ppsBillboardManage.setUpdatedFuncId(FUNCID);
                ppsBillboardManage.setUpdatedAt(LocalDateTime.now());
                ppsBillboardManageMapper.updateByPrimaryKeySelective(ppsBillboardManage);
                // 諸官庁申請情報のカウンターを取得
                PpsGovernmentManage ppsGovernmentManage = new PpsGovernmentManage();
                ppsGovernmentManage.setShopClassificationCode(shopCd);
                int countData = ppsGovernmentManageMapper
                        .ppsSelectManageCountByShopClassificationCode(ppsGovernmentManage);

                if (countData > 0) {
                    // 諸官庁申請情報更新
                    // 運営店担当者名
                    ppsGovernmentManage.setOperatingResponsibleName(history.getAgencyPersonName());
                    // ﾒｰﾙｱﾄﾞﾚｽ
                    ppsGovernmentManage.setOperatingResponsibleMail(history.getAgencyMail());
                    // 電話番号
                    ppsGovernmentManage.setOperatingResponsibleTel(history.getAgencyTel());
                    ppsGovernmentManage.setUpdatedUserId(USERID);
                    ppsGovernmentManage.setUpdatedFuncId(FUNCID);
                    ppsGovernmentManage.setUpdatedAt(LocalDateTime.now());
                    ppsGovernmentManageMapper.updateByPrimaryKeySelective(ppsGovernmentManage);
                } else {
                    // 諸官庁申請情報を挿入
                    ppsGovernmentManage.setShopClassificationCode(shopCd);
                    // 運営店担当者名
                    ppsGovernmentManage.setOperatingResponsibleName(history.getAgencyPersonName());
                    // ﾒｰﾙｱﾄﾞﾚｽ
                    ppsGovernmentManage.setOperatingResponsibleMail(history.getAgencyMail());
                    // 電話番号
                    ppsGovernmentManage.setOperatingResponsibleTel(history.getAgencyTel());
                    ppsGovernmentManage.setIsDeleted(false);
                    ppsGovernmentManage.setUpdatedUserId(USERID);
                    ppsGovernmentManage.setUpdatedFuncId(FUNCID);
                    ppsGovernmentManage.setUpdatedAt(LocalDateTime.now());
                    ppsGovernmentManage.setCreatedUserId(USERID);
                    ppsGovernmentManage.setCreatedFuncId(FUNCID);
                    ppsGovernmentManage.setCreatedAt(LocalDateTime.now());
                    ppsGovernmentManageMapper.insert(ppsGovernmentManage);
                }

            }

        }

    }

    /**
     * 複数の値からMAX
     * 
     * @param vals
     * @return
     */
    private short getMax(Short... vals) {
        return Collections.max(Arrays.asList(vals));
    }

    // 複数のリストを連結する
    public <T> List<T> concatenate(List<T>... lists) {
        List<T> result = new ArrayList<>();
        for (List<T> l : lists) {
            result.addAll(l);
        }
        return result;
    }

    // クレ申請WFステータス
    private String setCleanlinessapplyWFStatus(String wfStatus) {
        // 01:調査報告
        if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS01NAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS01;
            // 02:申請保留
        } else if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS02NAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS02;
            // 03:事務局確認
        } else if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS03NAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS03;
            // 05:代理店結果確認
        } else if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS05NAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS05;
            // 07:異議申立確認
        } else if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS07NAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS07;
            // 調査完了
        } else if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS07ANAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS07A;
            // 08:終了
        } else if (PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS08NAME.equals(wfStatus)) {
            return PpsConst.CLEANLINESSAPPLYWFSTATUS.CLEANLINESSAPPLYWFSTATUS08;
        } else {
            return "";
        }
    }

    // 看板点検WF申請ステータス
    private String setSignboardinspectionWFStatus(String wfStatus) {
        // 01:看板業者選択
        if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS01NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS01;
            // 02:点検
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS02NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS02;
            // 03:承認
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS03NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS03;
            // 04:看板業者選択(是正用)
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS04NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS04;
            // 05:是正申請
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS05NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS05;
            // 06:是正承認(代理店)
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS06NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS06;
            // 07:指定業者是正申請
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS07NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS07;
            // 08:是正承認(指定業者)
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS08NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS08;
            // 09:終了
        } else if (PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS09NAME.equals(wfStatus)) {
            return PpsConst.SIGNBOARDINSPECTIONWFSTATUS.SIGNBOARDINSPECTIONWFSTATUS09;
        } else {
            return "";
        }
    }
}
